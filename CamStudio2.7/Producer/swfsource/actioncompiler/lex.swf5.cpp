#include <stdlib.h>
#include "common.h"

#define input yyinput

#define yy_create_buffer swf5_create_buffer
#define yy_delete_buffer swf5_delete_buffer
#define yy_scan_buffer swf5_scan_buffer
#define yy_scan_string swf5_scan_string
#define yy_scan_sbytes swf5_scan_sbytes
#define yy_flex_debug swf5_flex_debug
#define yy_init_buffer swf5_init_buffer
#define yy_flush_buffer swf5_flush_buffer
#define yy_load_buffer_state swf5_load_buffer_state
#define yy_switch_to_buffer swf5_switch_to_buffer
#define yyin swf5in
#define yyleng swf5leng
#define yylex swf5lex
#define yyout swf5out
#define yyrestart swf5restart
#define yytext swf5text
#define yywrap swf5wrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in sbytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */

int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_sbytes YY_PROTO(( yyconst char *sbytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 159
#define YY_END_OF_BUFFER 160
static yyconst short int yy_accept[578] =
    {   0,
        0,    0,  160,  158,  115,  157,  146,  158,  145,  140,
      158,  147,  148,  143,  138,  153,  139,  154,  144,    1,
      156,  136,  134,  137,  135,  155,  149,  150,  142,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  151,
      141,  152,  121,    0,  111,  109,    0,  122,    0,  112,
      110,    0,  124,  116,  126,  117,  127,  113,  114,  125,
        2,    1,  128,  118,  120,  119,  129,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   16,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,   14,   13,

      108,  108,  108,  108,  108,  108,  108,  108,  108,   59,
      108,  108,  108,  108,    0,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  123,
        2,  131,  132,  130,   62,   58,   23,  108,  108,  108,
      108,   33,  108,   69,  108,  108,   51,  108,   21,  108,
      108,  108,  108,   12,  108,  106,  108,   68,  108,   31,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
       18,  108,   88,  108,  108,   32,  108,   53,  108,  108,
      108,  107,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,   17,  108,  108,

       60,  133,  108,  108,  108,   11,  108,  108,  108,  108,
      108,    9,  108,  108,   24,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,    5,  108,  108,
      108,   38,  105,  108,   54,  108,  108,  108,  108,  108,
      108,  108,  108,  108,   39,  108,  108,  108,   52,  108,
      108,  108,    3,  108,  108,  108,   22,  108,    6,  108,
      108,  108,  108,  108,  108,  108,  108,  108,    4,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  101,  108,  100,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,   30,  108,  108,   15,  102,  108,  108,  108,
       28,  108,   19,   83,  108,  108,   66,  108,  108,  108,
       34,  108,  108,  108,  108,   27,  108,  108,  108,  108,
      108,  108,   61,  108,   63,  108,  108,  108,   80,  108,
      108,  108,   25,  108,   20,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,   29,  108,   10,  108,   70,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,   35,  108,  108,  108,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,    7,  108,  108,    8,  108,   26,  108,  108,  108,
      108,   64,  108,  108,  108,  108,   98,  108,   82,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,   96,  108,   89,  108,  108,   81,  108,
      108,  108,  108,   42,  108,  108,  108,   71,   74,  108,
       43,   73,  108,   46,  108,  108,   87,  108,   67,  108,
       36,   84,  108,   37,  108,   75,  108,   44,  108,   76,

      108,   95,  108,  108,  108,   91,  108,   79,  108,  108,
      108,   57,  108,  108,   72,  108,  108,   86,  108,  108,
      108,  108,  108,  108,  108,   77,   41,  108,  108,  108,
      108,  108,  108,  108,   92,  108,  108,   99,   65,   85,
      108,   55,  108,   93,   78,  108,  108,  108,  103,  104,
       56,  108,   48,  108,  108,  108,   90,  108,  108,  108,
       45,  108,   94,  108,   40,  108,  108,  108,   97,  108,
      108,   50,  108,   47,  108,   49,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       17,   17,   17,   17,   17,   17,   17,   20,   21,   22,
       23,   24,   25,    1,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   30,
       26,   27,   28,   29,   30,    1,   31,   32,   33,   34,

       35,   36,   37,   38,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   30,   56,   57,   58,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    2,    2,    2,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    1
    } ;

static yyconst short int yy_base[581] =
    {   0,
        0,    0,  615,  616,  616,  616,  591,   56,  616,  606,
       57,  616,  616,  589,   50,  616,   49,  616,   53,   60,
      616,  616,   44,  588,   47,  616,  616,  616,  616,    0,
       46,  562,   43,   47,   47,   56,   58,   60,   65,   70,
       71,   63,   72,   77,   89,   80,  578,   80,  563,  616,
      550,  616,  616,  126,  127,  616,  603,  616,  130,  133,
      616,  602,  616,  616,  616,  616,  616,  616,  616,  616,
      126,  131,  581,  616,  616,  616,  128,    0,  569,  568,
      558,   78,  113,  552,  555,  114,  546,    0,  551,  547,
       34,  544,  563,  551,  544,  547,  540,  539,    0,  125,

      117,  128,  134,  554,  545,  115,  536,  543,  550,  549,
      551,   88,  546,  531,  153,  535,  130,  528,  538,  143,
      544,  146,  538,  147,  528,  525,  533,  521,  522,  616,
      175,  616,  616,  546,    0,    0,    0,  524,  536,  524,
      530,    0,  149,    0,  529,  524,  520,  526,    0,  517,
      528,  516,  508,    0,  523,  152,  510,    0,  504,    0,
      516,  503,  517,  511,  511,  513,  499,  495,  494,  494,
      155,  493,    0,  500,  165,    0,  486,    0,  490,  487,
      500,  191,  503,  491,  484,  163,  498,  485,  486,  492,
      167,  484,  479,  491,  494,  491,  490,  489,  481,  484,

        0,  616,  488,  479,  169,    0,  488,  479,  467,  482,
      476,    0,  479,  471,    0,  477,  461,  475,  470,  460,
      476,  470,  156,  455,  454,  171,  470,  454,  457,  466,
      467,  456,  458,  462,  448,  459,  457,    0,  458,  444,
      455,    0,    0,  453,    0,  443,  435,  438,  450,  449,
      452,  451,  431,  430,  184,  435,  428,  429,    0,  443,
      433,  439,    0,  428,  425,  436,    0,  432,    0,  133,
      434,  418,  423,  431,  430,  431,  415,  413,    0,  422,
      417,  416,  416,  409,  408,  407,  422,  415,  414,  406,
      419,  418,    0,  411,    0,  398,  401,  399,  410,  392,

      393,  393,  406,  388,  389,  389,  393,  400,  390,  390,
      395,  383,  382,  177,  395,  380,  382,  389,  377,  393,
      385,  387,    0,  385,  369,    0,  189,  388,  374,  367,
        0,  365,    0,    0,  384,  383,    0,  368,  380,  376,
      392,  370,  377,  359,  366,    0,  374,  352,  355,  360,
      351,  350,    0,  357,    0,  367,  348,  365,    0,  364,
      345,  362,    0,  349,    0,  359,  351,  352,  349,  352,
      347,  337,  353,  332,  187,  343,  348,    0,  333,    0,
      348,  336,  341,  333,  342,  336,  338,  322,  321,  326,
      334,  320,    0,  336,  323,  334,  329,  319,  323,  322,

      190,  322,  311,  303,  315,  306,  312,  312,  303,  309,
      306,  315,  300,  313,  316,  310,  308,  313,  306,  298,
      294,  305,  295,  288,  286,  294,  282,  284,  298,  282,
      286,    0,  295,  294,    0,  280,    0,  295,  291,  270,
      291,    0,  288,  291,  277,  272,    0,  280,    0,  269,
      279,  281,  266,  276,  278,  260,  263,  260,  259,  276,
      257,  268,  268,    0,  270,    0,  182,  266,    0,  271,
      252,  269,  251,    0,  259,  263,  253,    0,    0,  253,
        0,    0,  244,  249,  260,  257,    0,  246,    0,  258,
        0,    0,  257,    0,  248,    0,  251,  250,  242,    0,

      233,    0,  233,  244,  231,    0,  237,    0,  223,  226,
      231,    0,  230,  239,    0,  222,  230,    0,  234,  226,
      225,  233,  219,  212,  230,  245,    0,  213,  212,  222,
      211,  224,  214,  205,    0,  213,  220,    0,    0,    0,
      221,    0,  207,    0,    0,  214,  213,  200,    0,    0,
        0,  210,    0,  199,  205,  198,    0,  214,  189,  208,
      198,  202,    0,  196,    0,  201,  181,  184,    0,  185,
      181,    0,  150,    0,  117,    0,  616,  235,  237,  124
    } ;

static yyconst short int yy_def[581] =
    {   0,
      577,    1,  577,  577,  577,  577,  577,  578,  577,  577,
      579,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  577,
      577,  577,  577,  578,  578,  577,  578,  577,  579,  579,
      577,  579,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  577,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  577,
      577,  577,  577,  577,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  577,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  577,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,    0,  577,  577,  577
    } ;

static yyconst short int yy_nxt[675] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   20,   20,   21,
       22,   23,   24,   25,   26,   27,    4,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   30,   38,   30,
       30,   39,   40,   41,   42,   43,   30,   44,   45,   46,
       30,   47,   48,   49,   30,   50,   51,   52,   55,   60,
       56,   64,   66,   68,   61,   73,   74,  149,   69,   76,
       77,   67,   65,   83,   71,   70,   72,   72,   72,   79,
       84,   86,   57,   62,  150,   87,   94,   85,   90,   80,
       91,   88,   97,   92,   81,   99,  115,   89,   93,  101,

       95,  103,   98,  100,  109,  106,   96,  116,  138,  102,
      110,  117,  139,  111,  104,  107,  112,  127,  128,  113,
      105,  108,  114,  118,  123,   78,  119,  124,   55,   55,
       56,   56,   60,  178,  125,   60,  179,   61,  120,  121,
       61,  122,  131,  131,  131,   71,  144,   72,   72,   72,
      133,  134,   57,   57,  140,  145,   62,  158,  163,   62,
      161,  141,  576,  159,  164,  162,  165,  171,  172,  182,
      182,  182,  184,  188,  160,  166,  192,  195,  167,  185,
      328,  207,  168,  329,  193,  234,  286,  189,  575,  235,
      190,  131,  131,  131,  218,  239,  236,  196,  208,  240,

      287,  219,  220,  221,  270,  249,  241,  182,  182,  182,
      250,  271,  251,  290,  252,  257,  258,  316,  370,  382,
      445,  421,  291,  574,  371,  504,  573,  383,  422,  572,
      505,  571,  317,  570,  446,   54,   54,   59,   59,  569,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  557,  556,  555,  554,  553,  552,  551,  550,  549,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  534,  533,  532,  531,  530,  529,
      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,

      508,  507,  506,  503,  502,  501,  500,  499,  498,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      424,  423,  420,  419,  418,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,

      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  369,
      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      338,  337,  336,  335,  334,  333,  332,  331,  330,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  315,
      314,  313,  312,  311,  310,  309,  308,  307,  306,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,

      294,  293,  292,  289,  288,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      256,  255,  254,  253,  248,  247,  246,  245,  244,  243,
      242,  238,  237,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  217,  216,  215,  214,  213,
      212,  211,  210,  209,  206,  205,  204,  203,  202,  201,
      200,  199,  198,  197,  194,  191,  187,  186,  183,  181,
      180,  177,  176,  175,  174,  173,  170,  169,  157,  156,
      155,  154,  153,  152,  151,  148,  147,  146,  143,  142,

      137,  136,  135,  132,  577,  577,  130,  129,  126,   82,
       75,   63,   58,   53,  577,    3,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577
    } ;

static yyconst short int yy_chk[675] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    8,   11,
        8,   15,   17,   19,   11,   23,   23,   91,   19,   25,
       25,   17,   15,   33,   20,   19,   20,   20,   20,   31,
       33,   34,    8,   11,   91,   34,   36,   33,   35,   31,
       35,   34,   37,   35,   31,   38,   44,   34,   35,   39,

       36,   40,   37,   38,   42,   41,   36,   44,   82,   39,
       42,   44,   82,   43,   40,   41,   43,   48,   48,   43,
       40,   41,   43,   45,   46,  580,   45,   46,   54,   55,
       54,   55,   59,  112,   46,   60,  112,   59,   45,   45,
       60,   45,   71,   71,   71,   72,   86,   72,   72,   72,
       77,   77,   54,   55,   83,   86,   59,  100,  102,   60,
      101,   83,  575,  100,  102,  101,  103,  106,  106,  115,
      115,  115,  117,  120,  100,  103,  122,  124,  103,  117,
      270,  143,  103,  270,  122,  171,  223,  120,  573,  171,
      120,  131,  131,  131,  156,  175,  171,  124,  143,  175,

      223,  156,  156,  156,  205,  186,  175,  182,  182,  182,
      186,  205,  186,  226,  186,  191,  191,  255,  314,  327,
      401,  375,  226,  571,  314,  467,  570,  327,  375,  568,
      467,  567,  255,  566,  401,  578,  578,  579,  579,  564,
      562,  561,  560,  559,  558,  556,  555,  554,  552,  548,
      547,  546,  543,  541,  537,  536,  534,  533,  532,  531,
      530,  529,  528,  526,  525,  524,  523,  522,  521,  520,
      519,  517,  516,  514,  513,  511,  510,  509,  507,  505,
      504,  503,  501,  499,  498,  497,  495,  493,  490,  488,
      486,  485,  484,  483,  480,  477,  476,  475,  473,  472,

      471,  470,  468,  465,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  454,  453,  452,  451,  450,  448,  446,
      445,  444,  443,  441,  440,  439,  438,  436,  434,  433,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  417,  416,  415,  414,  413,  412,
      411,  410,  409,  408,  407,  406,  405,  404,  403,  402,
      400,  399,  398,  397,  396,  395,  394,  392,  391,  390,
      389,  388,  387,  386,  385,  384,  383,  382,  381,  379,
      377,  376,  374,  373,  372,  371,  370,  369,  368,  367,
      366,  364,  362,  361,  360,  358,  357,  356,  354,  352,

      351,  350,  349,  348,  347,  345,  344,  343,  342,  341,
      340,  339,  338,  336,  335,  332,  330,  329,  328,  325,
      324,  322,  321,  320,  319,  318,  317,  316,  315,  313,
      312,  311,  310,  309,  308,  307,  306,  305,  304,  303,
      302,  301,  300,  299,  298,  297,  296,  294,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  278,  277,  276,  275,  274,  273,  272,  271,  268,
      266,  265,  264,  262,  261,  260,  258,  257,  256,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  244,  241,
      240,  239,  237,  236,  235,  234,  233,  232,  231,  230,

      229,  228,  227,  225,  224,  222,  221,  220,  219,  218,
      217,  216,  214,  213,  211,  210,  209,  208,  207,  204,
      203,  200,  199,  198,  197,  196,  195,  194,  193,  192,
      190,  189,  188,  187,  185,  184,  183,  181,  180,  179,
      177,  174,  172,  170,  169,  168,  167,  166,  165,  164,
      163,  162,  161,  159,  157,  155,  153,  152,  151,  150,
      148,  147,  146,  145,  141,  140,  139,  138,  134,  129,
      128,  127,  126,  125,  123,  121,  119,  118,  116,  114,
      113,  111,  110,  109,  108,  107,  105,  104,   98,   97,
       96,   95,   94,   93,   92,   90,   89,   87,   85,   84,

       81,   80,   79,   73,   62,   57,   51,   49,   47,   32,
       24,   14,   10,    7,    3,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  577,  577,
      577,  577,  577,  577
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "swf5compiler.flex"
#define INITIAL 0
#line 2 "swf5compiler.flex"

#include <math.h>
#include <string.h>

#include "compile.h"
#include "action.h"
#include "swf5compiler.tab.h" /* defines token types */

int swf5debug;

static char *lexBuffer = NULL;
static int lexBufferLen = 0;

static int  sLineNumber = 0;
static char szLine[1024];
static char msgbufs[2][1024] = { {0}, {0} }, *msgline = {0};
static int  column = 0;

static void comment();
static void comment1();
static void count();
static void countline();
static void warning(char *msg);

#define YY_INPUT(buf,result,max_size) result=lexBufferInput(buf, max_size)

/* thanks to the prolific and brilliant Raff: */
static int lexBufferInput(char *buf, int max_size)
{
  int l = lexBufferLen > max_size ? max_size : lexBufferLen;

  if (lexBufferLen <= 0)
    return YY_NULL;

  memcpy(buf, lexBuffer, l);
  lexBuffer += l;
  lexBufferLen -= l;
  return l;
}

        /* very inefficient method of unescaping strings */
static void unescape(char *buf)
{
  char *p, *p1;

  for (p1=buf; (p=strchr(p1, '\\')) != 0; p1 = p+1) {
    switch(p[1])
    {
    case 'b' : p[1] = '\b'; break;
    case 'f' : p[1] = '\f'; break;
    case 'n' : p[1] = '\n'; break;
    case 'r' : p[1] = '\r'; break;
    case 't' : p[1] = '\t'; break;
    case 'x' :
    case 'u' : warning("unsupported escape sequence");
    }
    strcpy(p, p+1);
  }
}

void swf5ParseInit(char *script, int debug)
{
  checksbyteOrder();
  yyrestart(NULL);

  swf5debug = debug;

  lexBuffer = script;
  lexBufferLen = strlen(script);
  sLineNumber = 0;
  column = 0;
  msgline = msgbufs[0];
}

#line 793 "lex.swf5.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 81 "swf5compiler.flex"

#line 947 "lex.swf5.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 578 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 616 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 83 "swf5compiler.flex"
{ count();	swf5lval.intVal = atoi(yytext);
					return INTEGER;		}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 85 "swf5compiler.flex"
{ count();	swf5lval.doubleVal = atof(yytext);
					return DOUBLE; 		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 87 "swf5compiler.flex"
{ count();	swf5lval.intVal = 1;
					return BOOLEAN;		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "swf5compiler.flex"
{ count();	swf5lval.intVal = 0;
					return BOOLEAN;		}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 91 "swf5compiler.flex"
{ count();	return NULLVAL;		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "swf5compiler.flex"
{ count();	return BREAK;		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "swf5compiler.flex"
{ count();	return CONTINUE;	}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "swf5compiler.flex"
{ count();	return FUNCTION;	}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "swf5compiler.flex"
{ count();	return ELSE;		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "swf5compiler.flex"
{ count();	return SWITCH;		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "swf5compiler.flex"
{ count();	return CASE;		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "swf5compiler.flex"
{ count();	return FOR;		}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 99 "swf5compiler.flex"
{ count();	return IN;		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 100 "swf5compiler.flex"
{ count();	return IF;		}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 101 "swf5compiler.flex"
{ count();	return WHILE;		}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 102 "swf5compiler.flex"
{ count();	return DO;		}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 103 "swf5compiler.flex"
{ count();	return VAR;		}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 104 "swf5compiler.flex"
{ count();	return NEW;		}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 105 "swf5compiler.flex"
{ count();	return DELETE;		}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 106 "swf5compiler.flex"
{ count();	return RETURN;		}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 107 "swf5compiler.flex"
{ count();	return END;		}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 108 "swf5compiler.flex"
{ count();	return WITH;		}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 109 "swf5compiler.flex"
{ count();	return ASM;		}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 110 "swf5compiler.flex"
{ count();	return EVAL;		}
	YY_BREAK
/* legacy functions */
case 25:
YY_RULE_SETUP
#line 113 "swf5compiler.flex"
{ count();	return RANDOM;	}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 114 "swf5compiler.flex"
{ count();	return GETTIMER;	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 115 "swf5compiler.flex"
{ count();	return LENGTH;	}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 116 "swf5compiler.flex"
{ count();	return CONCAT;	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 117 "swf5compiler.flex"
{ count();	return SUBSTR;	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 118 "swf5compiler.flex"
{ count();	return TRACE;	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 119 "swf5compiler.flex"
{ count();	return INT;	}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 120 "swf5compiler.flex"
{ count();	return ORD;	}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 121 "swf5compiler.flex"
{ count();	return CHR;	}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 122 "swf5compiler.flex"
{ count();	return GETURL;	}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 123 "swf5compiler.flex"
{ count();	return GETURL1;	}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 124 "swf5compiler.flex"
{ count();	return NEXTFRAME;	}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 125 "swf5compiler.flex"
{ count();	return PREVFRAME;	}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 126 "swf5compiler.flex"
{ count();	return PLAY;		}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 127 "swf5compiler.flex"
{ count();	return STOP;		}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 128 "swf5compiler.flex"
{ count();	return TOGGLEQUALITY;	}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 129 "swf5compiler.flex"
{ count();	return STOPSOUNDS;	}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 130 "swf5compiler.flex"
{ count();	return CALLFRAME;	}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 131 "swf5compiler.flex"
{ count();	return GOTOFRAME;	}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 132 "swf5compiler.flex"
{ count();	return SETTARGET;	}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 133 "swf5compiler.flex"
{ count();	return LOADVARIABLES;	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 134 "swf5compiler.flex"
{ count();	return LOADMOVIE;	}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 135 "swf5compiler.flex"
{ count();	return LOADVARIABLESNUM;	}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 136 "swf5compiler.flex"
{ count();	return LOADMOVIENUM;	}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 137 "swf5compiler.flex"
{ count();	return DUPLICATEMOVIECLIP; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 138 "swf5compiler.flex"
{ count();	return REMOVEMOVIECLIP; }
	YY_BREAK
/* assembler ops */
case 51:
YY_RULE_SETUP
#line 141 "swf5compiler.flex"
{ count();	return DUP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 142 "swf5compiler.flex"
{ count();	return SWAP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 143 "swf5compiler.flex"
{ count();	return POP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 144 "swf5compiler.flex"
{ count();	return PUSH; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 145 "swf5compiler.flex"
{ count();	return SETREGISTER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 146 "swf5compiler.flex"
{ count();	return CALLFUNCTION; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 147 "swf5compiler.flex"
{ count();	return CALLMETHOD; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 148 "swf5compiler.flex"
{ count();	return AND; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 149 "swf5compiler.flex"
{ count();	return OR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 150 "swf5compiler.flex"
{ count();	return XOR; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 151 "swf5compiler.flex"
{ count();	return MODULO; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 152 "swf5compiler.flex"
{ count();	return ADD; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 153 "swf5compiler.flex"
{ count();	return ADD; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 154 "swf5compiler.flex"
{ count();	return LESSTHAN; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 155 "swf5compiler.flex"
{ count();	return LESSTHAN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 156 "swf5compiler.flex"
{ count();	return EQUALS; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 157 "swf5compiler.flex"
{ count();	return EQUALS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 158 "swf5compiler.flex"
{ count();	return INC; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 159 "swf5compiler.flex"
{ count();	return DEC; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 160 "swf5compiler.flex"
{ count();	return TYPEOF; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 161 "swf5compiler.flex"
{ count();	return ENUMERATE; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 162 "swf5compiler.flex"
{ count();	return INITOBJECT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 163 "swf5compiler.flex"
{ count();	return INITARRAY; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 164 "swf5compiler.flex"
{ count();	return GETMEMBER; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 165 "swf5compiler.flex"
{ count();	return SETMEMBER; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 166 "swf5compiler.flex"
{ count();	return SHIFTLEFT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 167 "swf5compiler.flex"
{ count();	return SHIFTRIGHT; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 168 "swf5compiler.flex"
{ count();	return SHIFTRIGHT2; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 169 "swf5compiler.flex"
{ count();	return VAREQUALS; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 170 "swf5compiler.flex"
{ count();	return OLDADD; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 171 "swf5compiler.flex"
{ count();	return SUBTRACT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 172 "swf5compiler.flex"
{ count();	return MULTIPLY; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 173 "swf5compiler.flex"
{ count();	return DIVIDE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 174 "swf5compiler.flex"
{ count();	return OLDEQUALS; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 175 "swf5compiler.flex"
{ count();	return OLDLESSTHAN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 176 "swf5compiler.flex"
{ count();	return LOGICALAND; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 177 "swf5compiler.flex"
{ count();	return LOGICALOR; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 178 "swf5compiler.flex"
{ count();	return NOT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 179 "swf5compiler.flex"
{ count();	return STRINGEQ; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 180 "swf5compiler.flex"
{ count();	return STRINGLENGTH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 181 "swf5compiler.flex"
{ count();	return SUBSTRING; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 182 "swf5compiler.flex"
{ count();	return GETVARIABLE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 183 "swf5compiler.flex"
{ count();	return SETVARIABLE; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 184 "swf5compiler.flex"
{ count();	return SETTARGETEXPRESSION; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 185 "swf5compiler.flex"
{ count();	return STARTDRAG; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 186 "swf5compiler.flex"
{ count();	return STOPDRAG; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 187 "swf5compiler.flex"
{ count();	return STRINGLESSTHAN; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 188 "swf5compiler.flex"
{ count();	return MBLENGTH; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 189 "swf5compiler.flex"
{ count();	return MBSUBSTRING; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 190 "swf5compiler.flex"
{ count();	return MBORD; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 191 "swf5compiler.flex"
{ count();	return MBCHR; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 192 "swf5compiler.flex"
{ count();	return BRANCHALWAYS; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 193 "swf5compiler.flex"
{ count();	return BRANCHALWAYS; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 194 "swf5compiler.flex"
{ count();	return BRANCHIFTRUE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 195 "swf5compiler.flex"
{ count();	return POST; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 196 "swf5compiler.flex"
{ count();	return GET; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 199 "swf5compiler.flex"
{ count();	swf5lval.str = _strdup(yytext+2);
					return REGISTER;	}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 203 "swf5compiler.flex"
{ count();	swf5lval.str = _strdup(yytext);
					return IDENTIFIER;	}
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 206 "swf5compiler.flex"
{ count();	swf5lval.str = _strdup(yytext+1);
					swf5lval.str[strlen(swf5lval.str)-1]=0;
                                        unescape(swf5lval.str);
					return STRING;		}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 211 "swf5compiler.flex"
{ count();	swf5lval.str = _strdup(yytext+1);
					swf5lval.str[strlen(swf5lval.str)-1]=0;
                                        unescape(swf5lval.str);
					return STRING; 		}
	YY_BREAK
case 111:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 216 "swf5compiler.flex"
{ count();	swf5lval.str = _strdup("");
					warning("Unterminated string!");
					return STRING;		}
	YY_BREAK
case 112:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 220 "swf5compiler.flex"
{ count();	swf5lval.str = _strdup("");
					warning("Unterminated string!");
					return STRING;		}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 224 "swf5compiler.flex"
{ count();	comment();		}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 225 "swf5compiler.flex"
{ count();	comment1();		}
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 226 "swf5compiler.flex"
{ count(); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 228 "swf5compiler.flex"
{ count();	return INCR; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 229 "swf5compiler.flex"
{ count();	return DECR; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 230 "swf5compiler.flex"
{ count();	return LE; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 231 "swf5compiler.flex"
{ count();	return GE; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 232 "swf5compiler.flex"
{ count();	return EQ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 233 "swf5compiler.flex"
{ count();	return NE; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 234 "swf5compiler.flex"
{ count();	return LAN; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 235 "swf5compiler.flex"
{ count();	return LOR; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 236 "swf5compiler.flex"
{ count();	return MEQ; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 237 "swf5compiler.flex"
{ count();	return DEQ; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 238 "swf5compiler.flex"
{ count();	return IEQ; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 239 "swf5compiler.flex"
{ count();	return SEQ; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 240 "swf5compiler.flex"
{ count();	return SHL; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 241 "swf5compiler.flex"
{ count();	return SHR; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 242 "swf5compiler.flex"
{ count();	return SHR2; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 243 "swf5compiler.flex"
{ count();	return SHLEQ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 244 "swf5compiler.flex"
{ count();	return SHREQ; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 245 "swf5compiler.flex"
{ count();	return SHR2EQ; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 247 "swf5compiler.flex"
{ count();	return '<'; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 248 "swf5compiler.flex"
{ count();	return '>'; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 249 "swf5compiler.flex"
{ count();	return ';'; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 250 "swf5compiler.flex"
{ count();	return '='; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 251 "swf5compiler.flex"
{ count();	return '+'; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 252 "swf5compiler.flex"
{ count();	return '-'; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 253 "swf5compiler.flex"
{ count();	return '&'; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 254 "swf5compiler.flex"
{ count();	return '|'; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 255 "swf5compiler.flex"
{ count();	return '^'; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 256 "swf5compiler.flex"
{ count();	return '*'; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 257 "swf5compiler.flex"
{ count();	return '/'; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 258 "swf5compiler.flex"
{ count();	return '%'; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 259 "swf5compiler.flex"
{ count();	return '!'; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 260 "swf5compiler.flex"
{ count();	return '('; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 261 "swf5compiler.flex"
{ count();	return ')'; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 262 "swf5compiler.flex"
{ count();	return '['; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 263 "swf5compiler.flex"
{ count();	return ']'; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 264 "swf5compiler.flex"
{ count();	return '{'; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 265 "swf5compiler.flex"
{ count();	return '}'; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 266 "swf5compiler.flex"
{ count();	return ','; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 267 "swf5compiler.flex"
{ count();	return '.'; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 268 "swf5compiler.flex"
{ count();	return '?'; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 269 "swf5compiler.flex"
{ count();	return ':'; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 271 "swf5compiler.flex"
{ count();	strcpy(szLine, yytext + 1);
					countline();	yyless(1);	}
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 274 "swf5compiler.flex"
SWF_error(error_fp,"Unrecognized character: %s\n", yytext);
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 276 "swf5compiler.flex"
ECHO;
	YY_BREAK
#line 1850 "lex.swf5.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 578 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 578 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 577);

	return yy_is_jam ? 0 : yy_current_state;
	}

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */

#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}

#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}

#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}

#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}

#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}

#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_sbytes( yy_str, len );
	}
#endif

#ifndef YY_NO_SCAN_sbyteS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_sbytes( yyconst char *sbytes, int len )
#else
YY_BUFFER_STATE yy_scan_sbytes( sbytes, len )
yyconst char *sbytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_sbytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = sbytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_sbytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif

#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif

#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 276 "swf5compiler.flex"

int swf5wrap()
{
  return 1;
}

static void countline()
{
  if (sLineNumber != 0)
    msgline[column] = 0;

  ++sLineNumber;
  column = 0;
  msgline = msgbufs[sLineNumber & 1];
}

static int LineNumber(void)
{
   return (sLineNumber + 1);
}

static int ColumnNumber(void)
{
   return column;
}

static char *LineText(void)
{
  msgline[column] = 0;
  return msgline;
}

static void comment()
{
   // Handle block comments

   char c, c1;

loop:
   // We have the start of a comment so look skip everything up to the
   // end of the comment character
   while ((c = input()) != '*' && c != 0)
   {
      if (column < 1023)
         msgline[column] = c;

      ++column;

      // keep the line number in synch
      if (c == '\n')
      {
         // start the output (matches the algorithim in the lexx above)
	 countline();
      }

      if (swf5debug) putchar(c);
   }

   // is this the end of comment character
   if ((c1 = input()) != '/' && c != 0)
   {
      // false start as this was no end of comment
      unput(c1);
      goto loop;
   }

   // write out the start of the end of comment
   if (c != 0)
      if (swf5debug) putchar(c);

   // write out the end of the end of comment
   if (c1 != 0)
      if (swf5debug) putchar(c1);
}

static void comment1()
{
   // Handle comment of type 1 (ie '//')

   char c;

   // this is a line comment
   while ((c = input()) != '\n' && c != 0)
   {
      if (swf5debug) putchar(c);

      if (column < 1023)
         msgline[column] = c;

      ++column;
   };

   // keep the line number in synch
   if (c == '\n')
   {
      if (swf5debug) putchar(c);

      countline();
   }
}

static void count(void)
{
   int n;

   // Count the characters to maintain the current column position
   if (yytext[0] == '\n')
   {
      if (swf5debug) printf("\n");
   }
   else
   {
      if (swf5debug) printf("%s", yytext);

      for(n=0; n<yyleng; ++n, ++column)
      {
	if (column < 1023)
	  msgline[column] = yytext[n];
      }

      //-- keep writing the stuff to standard output
      //column += yyleng;
   }
}

static void printprog()
{
  if (sLineNumber)
    SWF_warn("\n%s", msgbufs[(sLineNumber-1)&1]);

  if (column < 1023)
    msgline[column] = 0;

  SWF_warn("\n%s", msgline);
}

static void warning(char *msg)
{
   // print a warning message
   printprog();
   SWF_warn("\n%*s", ColumnNumber(), "^");
   SWF_warn("\nLine %4.4d:  Reason: '%s' \n", LineNumber(), msg);
}

void swf5error(char *msg)
{
  // report a error
  if (strlen(yytext))
  {
    SWF_error(error_fp,"\n%s\n%*s\nLine %i:  Reason: '%s'\n",
	      LineText(), ColumnNumber(), "^", LineNumber(), msg);
  }
  else
  {
    SWF_error(error_fp,"\nLine %d: Reason: 'Unexpected EOF found while looking for input.'\n", LineNumber());
  }
}
