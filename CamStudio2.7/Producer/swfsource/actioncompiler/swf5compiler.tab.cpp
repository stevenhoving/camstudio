
/*  A Bison parser, made from swf5compiler.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse swf5parse
#define yylex swf5lex
#define yyerror swf5error
#define yylval swf5lval
#define yychar swf5char
#define yydebug swf5debug
#define yynerrs swf5nerrs
#define	BREAK	257
#define	CONTINUE	258
#define	FUNCTION	259
#define	ELSE	260
#define	SWITCH	261
#define	CASE	262
#define	FOR	263
#define	IN	264
#define	IF	265
#define	WHILE	266
#define	DO	267
#define	VAR	268
#define	NEW	269
#define	DELETE	270
#define	RETURN	271
#define	END	272
#define	WITH	273
#define	ASM	274
#define	EVAL	275
#define	RANDOM	276
#define	GETTIMER	277
#define	LENGTH	278
#define	CONCAT	279
#define	SUBSTR	280
#define	TRACE	281
#define	INT	282
#define	ORD	283
#define	CHR	284
#define	GETURL	285
#define	GETURL1	286
#define	NEXTFRAME	287
#define	PREVFRAME	288
#define	PLAY	289
#define	STOP	290
#define	TOGGLEQUALITY	291
#define	STOPSOUNDS	292
#define	DUP	293
#define	SWAP	294
#define	POP	295
#define	PUSH	296
#define	SETREGISTER	297
#define	CALLFUNCTION	298
#define	CALLMETHOD	299
#define	AND	300
#define	OR	301
#define	XOR	302
#define	MODULO	303
#define	ADD	304
#define	LESSTHAN	305
#define	EQUALS	306
#define	INC	307
#define	DEC	308
#define	TYPEOF	309
#define	ENUMERATE	310
#define	INITOBJECT	311
#define	INITARRAY	312
#define	GETMEMBER	313
#define	SETMEMBER	314
#define	SHIFTLEFT	315
#define	SHIFTRIGHT	316
#define	SHIFTRIGHT2	317
#define	VAREQUALS	318
#define	OLDADD	319
#define	SUBTRACT	320
#define	MULTIPLY	321
#define	DIVIDE	322
#define	OLDEQUALS	323
#define	OLDLESSTHAN	324
#define	LOGICALAND	325
#define	LOGICALOR	326
#define	NOT	327
#define	STRINGEQ	328
#define	STRINGLENGTH	329
#define	SUBSTRING	330
#define	GETVARIABLE	331
#define	SETVARIABLE	332
#define	SETTARGETEXPRESSION	333
#define	DUPLICATEMOVIECLIP	334
#define	REMOVEMOVIECLIP	335
#define	STRINGLESSTHAN	336
#define	MBLENGTH	337
#define	MBSUBSTRING	338
#define	MBORD	339
#define	MBCHR	340
#define	BRANCHALWAYS	341
#define	BRANCHIFTRUE	342
#define	GETURL2	343
#define	POST	344
#define	GET	345
#define	LOADVARIABLES	346
#define	LOADMOVIE	347
#define	LOADVARIABLESNUM	348
#define	LOADMOVIENUM	349
#define	CALLFRAME	350
#define	STARTDRAG	351
#define	STOPDRAG	352
#define	GOTOFRAME	353
#define	SETTARGET	354
#define	NULLVAL	355
#define	INTEGER	356
#define	DOUBLE	357
#define	BOOLEAN	358
#define	REGISTER	359
#define	STRING	360
#define	IDENTIFIER	361
#define	EQ	362
#define	LE	363
#define	GE	364
#define	NE	365
#define	LAN	366
#define	LOR	367
#define	INCR	368
#define	DECR	369
#define	IEQ	370
#define	DEQ	371
#define	MEQ	372
#define	SEQ	373
#define	SHL	374
#define	SHR	375
#define	SHR2	376
#define	SHLEQ	377
#define	SHREQ	378
#define	SHR2EQ	379
#define	NOELSE	380
#define	UMINUS	384
#define	POSTFIX	385

#line 4 "swf5compiler.y"

#include <time.h>
#include <string.h>
#include "compile.h"
#include "assembler.h"

#define YYPARSE_PARAM buffer

Buffer bf, bc;

#line 17 "swf5compiler.y"
typedef union
{
  Buffer action;
  char *str;
  SWFGetUrl2Method getURLMethod;
  int op;
  int intVal;
  int len;
  double doubleVal;

  struct
  {
    Buffer buffer;
    int count;
  } exprlist;
  struct
  {
	Buffer obj, ident, memexpr;
  } lval;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif

#define	YYFINAL		596
#define	YYFLAG		-32768
#define	YYNTBASE	156

#define YYTRANSLATE(x) ((unsigned)(x) <= 385 ? yytranslate[x] : 207)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   144,     2,     2,     2,   143,   136,     2,   154,
   155,   141,   139,   127,   140,   148,   142,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   133,   153,   134,
   128,   135,   132,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   149,     2,   150,   138,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   151,   137,   152,   145,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   129,   130,   131,   146,   147
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     6,     9,    11,    13,    15,    18,    21,
    23,    27,    29,    32,    34,    36,    38,    40,    42,    44,
    46,    54,    57,    61,    63,    67,    75,    81,    82,    84,
    85,    94,    96,    99,   104,   106,   108,   110,   112,   114,
   116,   118,   120,   122,   124,   126,   128,   130,   132,   134,
   136,   138,   140,   142,   144,   146,   148,   150,   152,   154,
   156,   158,   160,   162,   164,   166,   168,   170,   172,   174,
   176,   178,   180,   182,   184,   186,   188,   190,   192,   194,
   196,   198,   200,   202,   204,   206,   208,   210,   212,   214,
   216,   218,   220,   222,   224,   226,   228,   230,   232,   234,
   236,   238,   240,   242,   244,   246,   248,   250,   252,   254,
   256,   258,   259,   261,   265,   272,   274,   278,   283,   285,
   287,   293,   300,   310,   318,   327,   328,   330,   333,   336,
   337,   340,   343,   346,   348,   350,   355,   360,   368,   376,
   384,   392,   400,   405,   412,   427,   431,   440,   445,   452,
   456,   460,   464,   468,   472,   476,   481,   486,   491,   496,
   501,   506,   511,   515,   520,   525,   530,   535,   540,   547,
   556,   561,   562,   564,   568,   574,   581,   589,   593,   595,
   599,   601,   603,   605,   607,   609,   611,   613,   615,   617,
   619,   621,   623,   625,   627,   631,   636,   638,   641,   644,
   647,   651,   655,   659,   663,   667,   671,   675,   679,   683,
   687,   691,   695,   699,   703,   707,   711,   715,   719,   723,
   729,   733,   735,   738,   744,   748,   750,   754,   756,   758,
   760,   762,   765,   768,   772,   775,   777,   780,   782,   784,
   786,   788,   790,   794,   798,   800,   801,   807,   810,   812,
   814,   816,   819,   822,   826,   830,   832,   835,   836,   841,
   843,   845,   847,   849,   851,   853,   855,   859,   860,   864,
   866,   869,   871,   873,   875,   877,   879,   881,   883,   885,
   887,   889,   891,   893,   895,   897,   899,   901,   903,   905,
   907,   909,   911,   913,   915,   917,   919,   921,   923,   925,
   927,   929,   931,   933,   935,   937,   939,   941,   943,   945,
   947,   949,   951,   953,   955,   957,   959,   961,   963,   965,
   967,   969,   971,   973,   975,   977,   979,   981,   983,   986
};

static const short yyrhs[] = {    -1,
   157,   158,     0,   159,     0,   158,   159,     0,   162,     0,
   174,     0,   162,     0,   160,   162,     0,   151,   152,     0,
   161,     0,   151,   160,   152,     0,   153,     0,   198,   153,
     0,   166,     0,   176,     0,   178,     0,   179,     0,   168,
     0,   164,     0,   163,     0,    19,   154,   193,   155,   151,
   160,   152,     0,    17,   153,     0,    17,   193,   153,     0,
   198,     0,   165,   127,   198,     0,    11,   154,   193,   155,
   162,     6,   162,     0,    11,   154,   193,   155,   162,     0,
     0,   193,     0,     0,     7,   154,   193,   155,   151,   169,
   170,   152,     0,   171,     0,   170,   171,     0,     8,   102,
   133,   162,     0,   107,     0,    15,     0,    16,     0,    22,
     0,    23,     0,    24,     0,    25,     0,    26,     0,    27,
     0,    28,     0,    29,     0,    30,     0,    31,     0,    32,
     0,    33,     0,    34,     0,    35,     0,    36,     0,    37,
     0,    38,     0,    39,     0,    40,     0,    41,     0,    42,
     0,    43,     0,    44,     0,    45,     0,    46,     0,    47,
     0,    48,     0,    49,     0,    50,     0,    51,     0,    52,
     0,    53,     0,    54,     0,    55,     0,    56,     0,    57,
     0,    58,     0,    59,     0,    60,     0,    61,     0,    62,
     0,    63,     0,    64,     0,    65,     0,    66,     0,    67,
     0,    68,     0,    69,     0,    70,     0,    71,     0,    72,
     0,    73,     0,    74,     0,    75,     0,    76,     0,    77,
     0,    78,     0,    79,     0,    80,     0,    81,     0,    97,
     0,    98,     0,    82,     0,    83,     0,    84,     0,    85,
     0,    86,     0,    87,     0,    88,     0,    89,     0,    90,
     0,    91,     0,    92,     0,    93,     0,     0,   172,     0,
   173,   127,   172,     0,     5,   172,   154,   173,   155,   162,
     0,   172,     0,   193,   148,   172,     0,   193,   149,   193,
   150,     0,   183,     0,   186,     0,    12,   154,   193,   155,
   162,     0,    13,   162,    12,   154,   193,   155,     0,     9,
   154,   177,   153,   167,   153,   177,   155,   162,     0,     9,
   154,   172,    10,   175,   155,   162,     0,     9,   154,    14,
   172,    10,   175,   155,   162,     0,     0,   165,     0,     4,
   153,     0,     3,   153,     0,     0,   127,    91,     0,   127,
    90,     0,   127,   106,     0,   102,     0,   193,     0,   107,
   154,   184,   155,     0,    27,   154,   194,   155,     0,    31,
   154,   193,   127,   193,   180,   155,     0,    92,   154,   193,
   127,   193,   180,   155,     0,    94,   154,   193,   127,   181,
   180,   155,     0,    93,   154,   193,   127,   193,   180,   155,
     0,    95,   154,   193,   127,   181,   180,   155,     0,    96,
   154,   193,   155,     0,    97,   154,   193,   127,   193,   155,
     0,    97,   154,   193,   127,   193,   127,   193,   127,   193,
   127,   193,   127,   193,   155,     0,    98,   154,   155,     0,
    80,   154,   193,   127,   193,   127,   193,   155,     0,    81,
   154,   193,   155,     0,    32,   154,   106,   127,   106,   155,
     0,    33,   154,   155,     0,    34,   154,   155,     0,    35,
   154,   155,     0,    36,   154,   155,     0,    38,   154,   155,
     0,    37,   154,   155,     0,    99,   154,   102,   155,     0,
    99,   154,   106,   155,     0,    99,   154,   193,   155,     0,
   100,   154,   106,   155,     0,   100,   154,   193,   155,     0,
   107,   154,   184,   155,     0,    21,   154,   193,   155,     0,
    23,   154,   155,     0,    22,   154,   193,   155,     0,    24,
   154,   194,   155,     0,    28,   154,   193,   155,     0,    29,
   154,   193,   155,     0,    30,   154,   193,   155,     0,    25,
   154,   193,   127,   193,   155,     0,    76,   154,   193,   127,
   193,   127,   193,   155,     0,    55,   154,   194,   155,     0,
     0,   194,     0,   184,   127,   194,     0,     5,   154,   173,
   155,   162,     0,   191,   148,   172,   154,   184,   155,     0,
   191,   149,   193,   150,   154,   184,   155,     0,   172,   133,
   194,     0,   187,     0,   188,   127,   187,     0,   116,     0,
   119,     0,   118,     0,   117,     0,   129,     0,   130,     0,
   131,     0,   123,     0,   124,     0,   125,     0,   114,     0,
   115,     0,   192,     0,   172,     0,   191,   148,   172,     0,
   191,   149,   193,   150,     0,   195,     0,   140,   193,     0,
   145,   193,     0,   144,   193,     0,   193,   113,   193,     0,
   193,   112,   193,     0,   193,   141,   193,     0,   193,   142,
   193,     0,   193,   143,   193,     0,   193,   139,   193,     0,
   193,   140,   193,     0,   193,   136,   193,     0,   193,   137,
   193,     0,   193,   138,   193,     0,   193,   134,   193,     0,
   193,   135,   193,     0,   193,   109,   193,     0,   193,   110,
   193,     0,   193,   108,   193,     0,   193,   111,   193,     0,
   193,   120,   193,     0,   193,   121,   193,     0,   193,   122,
   193,     0,   193,   132,   193,   133,   193,     0,   192,   128,
   194,     0,   193,     0,    15,   172,     0,    15,   172,   154,
   184,   155,     0,   149,   184,   150,     0,   161,     0,   151,
   188,   152,     0,   183,     0,   185,     0,   186,     0,   191,
     0,   190,   192,     0,   192,   190,     0,   154,   193,   155,
     0,   140,   102,     0,   102,     0,   140,   103,     0,   103,
     0,   104,     0,   101,     0,   106,     0,   197,     0,   196,
   127,   197,     0,   172,   128,   194,     0,   172,     0,     0,
    20,   151,   199,   200,   152,     0,    14,   196,     0,   182,
     0,   183,     0,   186,     0,   190,   192,     0,   192,   190,
     0,   192,   128,   194,     0,   192,   189,   193,     0,   205,
     0,   200,   205,     0,     0,    19,   202,   200,    18,     0,
   106,     0,   102,     0,   103,     0,   104,     0,   101,     0,
   105,     0,   203,     0,   204,   127,   203,     0,     0,    42,
   206,   204,     0,   201,     0,    43,   105,     0,    44,     0,
    17,     0,    45,     0,    46,     0,    47,     0,    48,     0,
    49,     0,    50,     0,    51,     0,    52,     0,    53,     0,
    54,     0,    55,     0,    56,     0,    16,     0,    15,     0,
    58,     0,    57,     0,    59,     0,    60,     0,    61,     0,
    62,     0,    63,     0,    14,     0,    64,     0,    65,     0,
    66,     0,    67,     0,    68,     0,    69,     0,    70,     0,
    71,     0,    72,     0,    73,     0,    74,     0,    75,     0,
    76,     0,    28,     0,    39,     0,    40,     0,    41,     0,
    77,     0,    78,     0,    79,     0,    25,     0,    80,     0,
    81,     0,    27,     0,    82,     0,    22,     0,    83,     0,
    29,     0,    30,     0,    23,     0,    84,     0,    85,     0,
    86,     0,    87,   106,     0,    88,   106,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   139,   142,   149,   150,   154,   156,   161,   164,   170,   174,
   175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
   188,   197,   202,   208,   209,   213,   224,   233,   234,   239,
   241,   250,   253,   259,   267,   268,   269,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
   283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
   293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
   303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
   313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
   323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
   333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
   343,   347,   351,   356,   363,   376,   381,   387,   392,   394,
   398,   410,   418,   452,   483,   515,   516,   520,   528,   536,
   538,   540,   542,   549,   556,   565,   573,   577,   584,   591,
   598,   605,   612,   618,   625,   636,   641,   649,   653,   663,
   667,   671,   675,   679,   683,   687,   693,   700,   706,   713,
   722,   729,   733,   737,   741,   745,   749,   753,   757,   762,
   768,   775,   779,   784,   793,   805,   813,   822,   829,   833,
   839,   840,   841,   842,   843,   844,   845,   846,   847,   848,
   852,   853,   871,   893,   900,   906,   914,   916,   921,   926,
   930,   939,   949,   954,   959,   964,   969,   974,   979,   984,
   989,   994,   999,  1005,  1010,  1014,  1019,  1023,  1027,  1031,
  1041,  1070,  1072,  1078,  1084,  1089,  1094,  1102,  1104,  1106,
  1108,  1110,  1155,  1200,  1203,  1207,  1211,  1215,  1219,  1223,
  1227,  1234,  1236,  1242,  1248,  1255,  1257,  1260,  1263,  1265,
  1269,  1273,  1312,  1351,  1372,  1417,  1418,  1422,  1425,  1430,
  1433,  1436,  1439,  1442,  1444,  1451,  1452,  1456,  1459,  1462,
  1464,  1471,  1473,  1475,  1477,  1479,  1481,  1483,  1485,  1487,
  1489,  1491,  1493,  1495,  1497,  1499,  1501,  1503,  1505,  1507,
  1509,  1511,  1513,  1515,  1517,  1519,  1523,  1524,  1525,  1526,
  1527,  1528,  1529,  1530,  1531,  1532,  1533,  1534,  1535,  1536,
  1537,  1538,  1539,  1540,  1541,  1542,  1543,  1544,  1545,  1546,
  1547,  1548,  1549,  1550,  1551,  1552,  1553,  1554,  1557,  1561
};
#endif

#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BREAK",
"CONTINUE","FUNCTION","ELSE","SWITCH","CASE","FOR","IN","IF","WHILE","DO","VAR",
"NEW","DELETE","RETURN","END","WITH","ASM","EVAL","RANDOM","GETTIMER","LENGTH",
"CONCAT","SUBSTR","TRACE","INT","ORD","CHR","GETURL","GETURL1","NEXTFRAME","PREVFRAME",
"PLAY","STOP","TOGGLEQUALITY","STOPSOUNDS","DUP","SWAP","POP","PUSH","SETREGISTER",
"CALLFUNCTION","CALLMETHOD","AND","OR","XOR","MODULO","ADD","LESSTHAN","EQUALS",
"INC","DEC","TYPEOF","ENUMERATE","INITOBJECT","INITARRAY","GETMEMBER","SETMEMBER",
"SHIFTLEFT","SHIFTRIGHT","SHIFTRIGHT2","VAREQUALS","OLDADD","SUBTRACT","MULTIPLY",
"DIVIDE","OLDEQUALS","OLDLESSTHAN","LOGICALAND","LOGICALOR","NOT","STRINGEQ",
"STRINGLENGTH","SUBSTRING","GETVARIABLE","SETVARIABLE","SETTARGETEXPRESSION",
"DUPLICATEMOVIECLIP","REMOVEMOVIECLIP","STRINGLESSTHAN","MBLENGTH","MBSUBSTRING",
"MBORD","MBCHR","BRANCHALWAYS","BRANCHIFTRUE","GETURL2","POST","GET","LOADVARIABLES",
"LOADMOVIE","LOADVARIABLESNUM","LOADMOVIENUM","CALLFRAME","STARTDRAG","STOPDRAG",
"GOTOFRAME","SETTARGET","NULLVAL","INTEGER","DOUBLE","BOOLEAN","REGISTER","STRING",
"IDENTIFIER","\"==\"","\"<=\"","\">=\"","\"!=\"","\"&&\"","\"||\"","\"++\"",
"\"--\"","\"+=\"","\"/=\"","\"*=\"","\"-=\"","\"<<\"","\">>\"","\">>>\"","\"<<=\"",
"\">>=\"","\">>>=\"","NOELSE","','","'='","\"&=\"","\"|=\"","\"^=\"","'?'","':'",
"'<'","'>'","'&'","'|'","'^'","'+'","'-'","'*'","'/'","'%'","'!'","'~'","UMINUS",
"POSTFIX","'.'","'['","']'","'{'","'}'","';'","'('","')'","program","@1","code",
"anycode","stmts","emptybraces","stmt","with_stmt","return_stmt","assign_stmts",
"if_stmt","expr_opt","switch_stmt","@2","switch_cases","switch_case","identifier",
"formals_list","function_decl","obj_ref","iter_stmt","assign_stmts_opt","cont_stmt",
"break_stmt","urlmethod","level","void_function_call","function_call","expr_list",
"anon_function_decl","method_call","objexpr","objexpr_list","assignop","incdecop",
"lvalue_expr","lvalue","expr","expr_or_obj","primary","init_vars","init_var",
"assign_stmt","@3","opcode_list","with","@4","push_item","push_list","opcode",
"@5", NULL
};
#endif

static const short yyr1[] = {     0,
   157,   156,   158,   158,   159,   159,   160,   160,   161,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   163,   164,   164,   165,   165,   166,   166,   167,   167,   169,
   168,   170,   170,   171,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   173,   173,   173,   174,   175,   175,   175,   175,   175,
   176,   176,   176,   176,   176,   177,   177,   178,   179,   180,
   180,   180,   180,   181,   181,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   184,   184,   184,   185,   186,   186,   187,   188,   188,
   189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
   190,   190,   191,   192,   192,   192,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   194,   194,   194,   194,   194,   194,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,   195,   195,
   195,   196,   196,   197,   197,   199,   198,   198,   198,   198,
   198,   198,   198,   198,   198,   200,   200,   202,   201,   203,
   203,   203,   203,   203,   203,   204,   204,   206,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   205,   205
};

static const short yyr2[] = {     0,
     0,     2,     1,     2,     1,     1,     1,     2,     2,     1,
     3,     1,     2,     1,     1,     1,     1,     1,     1,     1,
     7,     2,     3,     1,     3,     7,     5,     0,     1,     0,
     8,     1,     2,     4,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     0,     1,     3,     6,     1,     3,     4,     1,     1,
     5,     6,     9,     7,     8,     0,     1,     2,     2,     0,
     2,     2,     2,     1,     1,     4,     4,     7,     7,     7,
     7,     7,     4,     6,    14,     3,     8,     4,     6,     3,
     3,     3,     3,     3,     3,     4,     4,     4,     4,     4,
     4,     4,     3,     4,     4,     4,     4,     4,     6,     8,
     4,     0,     1,     3,     5,     6,     7,     3,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     3,     4,     1,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
     3,     1,     2,     5,     3,     1,     3,     1,     1,     1,
     1,     2,     2,     3,     2,     1,     2,     1,     1,     1,
     1,     1,     3,     3,     1,     0,     5,     2,     1,     1,
     1,     2,     2,     3,     3,     1,     2,     0,     4,     1,
     1,     1,     1,     1,     1,     1,     3,     0,     3,     1,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    36,    37,     0,     0,     0,     0,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    94,    95,    96,    97,   100,   101,   102,   103,
   104,   105,   106,   107,   108,   109,   110,   111,     0,     0,
     0,    98,    99,     0,     0,    35,   191,   192,     0,    12,
     2,     3,    10,     5,    20,    19,    14,    18,   194,     6,
    15,    16,    17,   249,   250,   251,     0,     0,   193,     0,
   129,   128,    38,    39,    40,    41,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    71,    92,
    96,    97,   110,   111,    98,    99,    35,     0,     0,   126,
     0,     0,     0,   245,   248,   242,     0,   240,   236,   238,
   239,   241,    35,     0,     0,     0,    22,     0,   228,   229,
   230,     0,   231,   193,     0,   197,     0,   246,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   172,     9,
     0,     7,     4,     0,   252,     0,     0,   181,   184,   183,
   182,   188,   189,   190,     0,   185,   186,   187,     0,   253,
    13,   112,     0,     0,   127,   194,     0,    24,     0,     0,
     0,     0,     0,   112,   172,   235,   237,   198,   200,   199,
     0,   232,     0,   233,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    23,     0,     0,     0,     0,   163,
    36,   172,     0,   226,   222,     0,     0,     0,     0,     0,
     0,     0,     0,   150,   151,   152,   153,   155,   154,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
   236,   241,     0,   241,     0,     0,   173,    11,     8,     0,
     0,   195,     0,   254,   255,   113,     0,     0,   245,     0,
     0,    28,     0,     0,     0,   244,   243,     0,     0,   234,
   221,   215,   213,   214,   216,   202,   201,   217,   218,   219,
     0,   211,   212,   208,   209,   210,   206,   207,   203,   204,
   205,     0,   295,   287,   286,   273,   258,   321,   325,   316,
   319,   309,   323,   324,   310,   311,   312,   268,     0,   272,
   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
   284,   285,   289,   288,   290,   291,   292,   293,   294,   296,
   297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
   307,   308,   313,   314,   315,   317,   318,   320,   322,   326,
   327,   328,     0,     0,     0,   270,   256,   162,   164,   223,
     0,     0,   179,     0,   165,     0,   137,   166,   167,   168,
     0,     0,   171,     0,     0,   148,     0,     0,     0,     0,
   143,     0,   156,   157,   158,   159,   160,     0,   136,   195,
     0,   172,   196,     0,     0,    30,     0,    25,   194,     0,
   228,   230,     0,     0,    29,    27,   121,     0,     0,   161,
     0,     0,     0,     0,   271,   329,   330,   247,   257,   172,
   225,     0,     0,   227,     0,   130,     0,     0,     0,   130,
   130,   236,   130,   135,   130,     0,   174,   196,     0,   172,
   114,   115,     0,     0,     0,     0,     0,   126,     0,   122,
   175,   220,     0,     0,   264,   261,   262,   263,   265,   260,
   266,   269,     0,   178,   180,   169,     0,     0,   149,     0,
     0,     0,     0,     0,     0,     0,   144,   176,     0,     0,
     0,    32,     0,   124,   117,     0,     0,    26,    21,   259,
     0,   224,   132,   131,   133,   138,     0,     0,   139,   141,
   140,   142,     0,   177,     0,    31,    33,   125,   118,     0,
   267,   170,   147,     0,     0,   123,     0,    34,     0,     0,
     0,     0,   145,     0,     0,     0
};

static const short yydefgoto[] = {   594,
     1,   101,   102,   211,   103,   104,   105,   106,   235,   107,
   474,   108,   513,   551,   552,   109,   327,   110,   470,   111,
   237,   112,   113,   538,   503,   114,   169,   316,   170,   171,
   433,   434,   229,   172,   173,   174,   285,   317,   176,   155,
   156,   120,   277,   425,   426,   483,   531,   532,   427,   484
};

static const short yypact[] = {-32768,
  1032,  -137,  -116,  2887,  -112,  -111,  -103,   -92,  1628,  2887,
-32768,-32768,  1761,   -83,   -97,   -81,   -79,   -65,   -57,   -55,
-32768,   -53,   -52,   -49,   -46,   -45,   -43,   -41,   -39,   -37,
   -35,   -34,   -33,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -31,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -28,-32768,-32768,-32768,   -27,   -26,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -25,   -23,   -22,   -21,
   -19,   -18,   -17,   -16,   -15,   -13,-32768,-32768,  1175,-32768,
  1032,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  2887,  -109,   330,   -63,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -12,  1895,  2697,
  1895,  1895,    33,    15,    18,-32768,   -10,-32768,-32768,-32768,
-32768,-32768,    -7,  2029,  1895,  1895,-32768,  1895,-32768,-32768,
-32768,  2887,  -109,   -80,   550,-32768,  1895,-32768,  1895,  1895,
   -48,   773,  1895,   773,  1895,  1895,  1895,  1895,    40,    -5,
    -4,    -2,     1,     7,     8,   773,  1895,  1895,  1895,  1895,
  1895,  1895,  1895,  1895,  1895,     9,  2163,  2297,   773,-32768,
  1326,-32768,-32768,   -84,   -61,  2887,  1895,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   773,-32768,-32768,-32768,  1895,-32768,
-32768,  2887,   152,  2887,    21,   142,     4,-32768,   799,   836,
    12,   773,  2887,  2887,   773,-32768,-32768,-32768,-32768,-32768,
   872,   -61,   773,-32768,  1895,  1895,  1895,  1895,  1895,  1895,
  1895,  1895,  1895,  1895,  1895,  1895,  1895,  1895,  1895,  1895,
  1895,  1895,  1895,  1895,-32768,  2555,  3048,  3029,  3065,-32768,
  2887,   773,  2564,-32768,  4259,    10,  3683,    13,  3101,  3137,
  3173,  3719,    42,-32768,-32768,-32768,-32768,-32768,-32768,    16,
  3755,  3791,  3209,  3827,  3863,  3899,  3935,  3245,  3971,-32768,
    28,    35,  3281,    36,  3317,  -108,-32768,-32768,-32768,  2887,
  1895,    39,  3533,-32768,  4259,-32768,  -106,    19,    -3,  2793,
  1895,  1895,  1628,  1628,  1895,-32768,-32768,  -105,  -102,-32768,
-32768,  1028,    38,    38,  1028,   103,   103,   -47,   -47,   -47,
  4007,    38,    38,    66,    66,    66,   -64,   -64,-32768,-32768,
-32768,    41,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    67,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    88,    90,   352,-32768,-32768,-32768,-32768,    43,
  -114,    65,-32768,   -94,-32768,  1895,-32768,-32768,-32768,-32768,
  1895,    93,-32768,  1895,  1895,-32768,  1895,  1895,  2431,  2431,
-32768,  1895,-32768,-32768,-32768,-32768,-32768,   773,-32768,-32768,
  3569,   773,    46,  2887,  1628,-32768,  1895,-32768,    47,    49,
    60,    62,  3641,    48,  4259,   212,-32768,  3353,  1628,-32768,
  1895,  1628,  3048,   -20,-32768,-32768,-32768,-32768,-32768,   773,
-32768,   773,  2887,-32768,  3389,  4043,    64,  4079,  4115,  4043,
  4043,  -100,    99,  4259,    99,   616,-32768,-32768,   -99,   773,
-32768,-32768,   219,    74,  1628,  2887,  1895,  2793,  1628,-32768,
-32768,  4295,  1477,  2973,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   104,   -98,-32768,-32768,-32768,   -30,    75,-32768,  1895,
  1895,    77,    78,    80,    81,  1895,-32768,-32768,   -96,   118,
     2,-32768,  1628,-32768,-32768,  3605,    92,-32768,-32768,-32768,
   -20,-32768,-32768,-32768,-32768,-32768,  3425,  3461,-32768,-32768,
-32768,-32768,  4151,-32768,   115,-32768,-32768,-32768,-32768,  1628,
-32768,-32768,-32768,  1895,  1628,-32768,  4187,-32768,  1895,  4223,
  1895,  3497,-32768,   251,   252,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,   153,  -229,  -179,    -8,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  -296,    34,    14,-32768,  -211,-32768,
  -261,-32768,-32768,  -433,  -191,-32768,    -1,  -241,-32768,     5,
  -226,-32768,-32768,    11,    17,    23,   449,  -173,-32768,-32768,
    27,  -148,-32768,  -212,-32768,-32768,  -286,-32768,  -410,-32768
};

#define	YYLAST		4438

static const short yytable[] = {   115,
   153,   238,   284,   339,   284,   116,   467,   115,   286,   550,
   288,   117,   458,   116,   489,   121,   284,   118,   458,   117,
   464,   464,   300,   119,   458,   118,  -134,   458,   458,   284,
   458,   119,   493,    97,    98,   491,   122,   148,   216,   217,
   431,   149,   150,   154,   241,   284,   459,   253,   465,   479,
   151,   324,   480,   178,  -134,   548,   562,   494,   574,   563,
   564,   152,   284,   320,   321,   284,   542,   543,   336,   544,
   177,   545,   179,   284,   180,   565,   272,   273,   274,   341,
   525,   526,   527,   528,   529,   530,  -193,  -193,   181,   231,
   212,   270,   271,   272,   273,   274,   182,   115,   183,   115,
   184,   185,   284,   116,   186,   116,   280,   187,   188,   117,
   189,   117,   190,   489,   191,   118,   192,   118,   193,   194,
   195,   119,   196,   119,   242,   197,   198,   199,   200,   230,
   201,   202,   203,   214,   204,   205,   206,   207,   208,   215,
   209,   232,   242,   244,   243,   293,   245,   330,   115,   294,
   295,   331,   296,   576,   116,   297,   332,   261,   262,   263,
   117,   298,   299,   310,   435,   335,   118,   437,   442,   466,
   443,   485,   119,   267,   268,   269,   270,   271,   272,   273,
   274,   468,   453,   236,   254,   261,   262,   263,   214,   454,
   456,   482,   462,   486,   252,   487,   490,   492,   497,   510,
   518,  -116,   319,   515,   270,   271,   272,   273,   274,   115,
   255,   256,   257,   258,  -119,   116,  -120,   519,   539,   575,
   509,   117,   261,   262,   263,   537,   550,   118,   553,   566,
   561,   569,   570,   119,   571,   572,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   580,   585,   533,   322,
   595,   596,   523,   213,   577,   514,   557,   338,   505,   255,
   256,   257,   258,   259,   260,   326,   535,   329,   549,   337,
   524,   261,   262,   263,   581,     0,   154,   326,   284,     0,
     0,     0,   284,   264,   507,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   328,     0,     0,     0,
   284,     0,   284,     0,   430,     0,   432,     0,   534,     0,
     0,     0,     0,     0,   476,   477,     0,     0,   115,   471,
   284,   115,   115,     0,   116,   472,     0,   116,   116,     0,
   117,     0,     0,   117,   117,     0,   118,     0,     0,   118,
   118,     0,   119,   460,     0,   119,   119,     0,     0,     0,
     0,     0,     0,     0,   469,   363,   364,   365,   366,   238,
   367,     0,     0,   368,   369,     0,   370,     0,   371,   372,
   373,   374,     0,     0,     0,     0,     0,     0,     0,     0,
   375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
   385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
   395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
   405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
   415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     0,     0,     0,    97,    98,   218,   219,   220,   221,     0,
     0,     0,   222,   223,   224,     0,   512,   225,   226,   227,
   228,   175,     0,   115,     0,   471,     0,     0,     0,   116,
   521,   472,     0,   212,     0,   117,     0,   115,     0,     0,
   115,   118,     0,   116,     0,     0,   116,   119,     0,   117,
     0,     0,   117,     0,     0,   118,     0,   511,   118,     0,
   469,   119,     0,   488,   119,     0,   554,     0,     0,     0,
   558,     0,     0,   115,   319,     0,   115,   115,     0,   116,
     0,   115,   116,   116,     0,   117,   432,   116,   117,   117,
     0,   118,     0,   117,   118,   118,     0,   119,     0,   118,
   119,   119,     0,     0,   578,   119,     0,     0,     0,   555,
     0,   115,     0,     0,     0,     0,     0,   116,     0,     0,
     0,     0,     0,   117,     0,     0,     0,     0,     0,   118,
     0,   586,     0,     0,     0,   119,   588,     0,   115,     0,
     0,     0,     0,   115,   116,     0,     0,     0,     0,   116,
   117,     0,     0,     0,     0,   117,   118,   233,     0,   239,
   240,   118,   119,     0,     0,     0,     0,   119,     0,     0,
     0,     0,   248,   249,   250,     0,   251,     0,     0,     0,
     0,     0,     0,     0,     0,   276,     0,   278,   279,     0,
     0,   287,     0,   289,   290,   291,   292,     0,     0,     0,
     0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
   306,   307,   308,   309,     0,   313,   315,   255,   256,   257,
   258,   259,   260,     0,     0,   323,     0,     0,     0,   261,
   262,   263,     0,     0,     0,     0,     0,   325,     0,     0,
     0,   264,     0,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   275,   342,   343,   344,   345,   346,   347,   348,
   349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
   359,   360,   361,   255,   256,   257,   258,   259,   260,     0,
     0,     0,     0,     0,     0,   261,   262,   263,     0,     0,
     0,     0,   546,     0,     0,     0,     0,   264,     0,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   461,
   547,     0,     0,     0,     0,     0,     0,   157,     0,   473,
   475,     0,     0,   478,     0,     0,     0,   281,    12,     0,
     0,     0,     0,    16,    17,    18,    19,    20,    21,   127,
    23,    24,    25,   131,   132,   133,   134,   135,   136,   137,
   138,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,   141,   142,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,   143,   144,     0,     0,     0,   145,
   146,     0,     0,   158,   159,   160,   161,     0,   162,   163,
     0,     0,     0,     0,   495,     0,    97,    98,     0,   496,
     0,     0,   498,   499,     0,   500,   501,   504,   504,     0,
   506,     0,     0,     0,     0,     0,   255,   256,   257,   258,
   259,   260,   164,     0,     0,   473,   165,   166,   261,   262,
   263,   282,     0,   283,     0,     0,   168,     0,     0,   522,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,     0,   255,   256,   257,   258,   259,   260,     0,
     0,     0,     0,   333,     0,   261,   262,   263,     0,     0,
     0,     0,     0,     0,     0,   556,     0,   264,     0,   265,
   266,   267,   268,   269,   270,   271,   272,   273,   274,   255,
   256,   257,   258,   259,   260,     0,     0,     0,   567,   568,
   334,   261,   262,   263,   573,     0,     0,     0,     0,     0,
     0,     0,     0,   264,     0,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   340,     0,     0,     0,
     0,     0,   587,     0,     2,     3,     4,   590,     5,   592,
     6,     0,     7,     8,     9,    10,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,     0,     0,     0,     0,   256,   257,    96,     0,
     0,     0,     0,     0,     0,    97,    98,   261,   262,   263,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   265,   266,   267,   268,   269,   270,   271,   272,   273,
   274,     0,     0,     0,     0,     0,     0,     2,     3,     0,
     0,     5,    99,     6,   100,     7,     8,     9,    10,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,    94,    95,     0,     0,     0,     0,     0,
     0,    96,     0,     0,     0,     0,     0,     0,    97,    98,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    99,   210,   100,     2,     3,
     0,     0,     5,     0,     6,     0,     7,     8,     9,    10,
    11,    12,    13,     0,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,     0,     0,     0,     0,
     0,     0,    96,     0,     0,     0,     0,     0,     0,    97,
    98,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    99,   318,   100,     2,
     3,     0,     0,     5,     0,     6,     0,     7,     8,     9,
    10,    11,    12,    13,     0,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,     0,     0,
     0,     0,     0,    96,     0,     0,     0,     0,     0,     0,
    97,    98,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    99,   559,   100,
     2,     3,     0,     0,     5,     0,     6,     0,     7,     8,
     9,    10,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,     0,     0,
     0,     0,     0,     0,    96,     0,     0,     0,     0,     0,
     0,    97,    98,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   157,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    11,    12,     0,    99,     0,
   100,    16,    17,    18,    19,    20,    21,   127,    23,    24,
    25,   131,   132,   133,   134,   135,   136,   137,   138,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
   141,   142,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,   143,   144,     0,     0,     0,   145,   146,     0,
     0,   158,   159,   160,   161,     0,   162,   163,     0,     0,
     0,     0,     0,     0,    97,    98,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   157,
   164,     0,     0,     0,   165,   166,     0,     0,     0,    11,
    12,     0,     0,   167,   168,    16,    17,    18,    19,    20,
    21,   127,    23,    24,    25,   131,   132,   133,   134,   135,
   136,   137,   138,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,    73,    74,   141,   142,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    86,   143,   144,     0,     0,
     0,   145,   146,     0,     0,   158,   159,   160,   161,     0,
   162,   163,     0,     0,     0,     0,     0,     0,    97,    98,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   157,   164,     0,     0,     0,   165,   166,
     0,     0,     0,    11,    12,     0,     0,     0,   168,    16,
    17,    18,    19,    20,    21,   127,    23,    24,    25,   131,
   132,   133,   134,   135,   136,   137,   138,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,   141,   142,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
   143,   144,     0,     0,     0,   145,   146,     0,     0,   158,
   246,   247,   161,     0,   162,   163,     0,     0,     0,     0,
     0,     0,    97,    98,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   157,   164,     0,
     0,     0,   165,   166,     0,     0,     0,    11,    12,     0,
     0,     0,   168,    16,    17,    18,    19,    20,    21,   127,
    23,    24,    25,   131,   132,   133,   134,   135,   136,   137,
   138,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,   141,   142,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,   143,   144,     0,     0,     0,   145,
   146,     0,     0,   158,   311,   160,   161,     0,   312,   163,
     0,     0,     0,     0,     0,     0,    97,    98,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   157,   164,     0,     0,     0,   165,   166,     0,     0,
     0,    11,    12,     0,     0,     0,   168,    16,    17,    18,
    19,    20,    21,   127,    23,    24,    25,   131,   132,   133,
   134,   135,   136,   137,   138,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,   141,   142,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,   143,   144,
     0,     0,     0,   145,   146,     0,     0,   158,   159,   160,
   161,     0,   314,   163,     0,     0,     0,     0,     0,     0,
    97,    98,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   157,   164,     0,     0,     0,
   165,   166,     0,     0,     0,    11,    12,     0,     0,     0,
   168,    16,    17,    18,    19,    20,    21,   127,    23,    24,
    25,   131,   132,   133,   134,   135,   136,   137,   138,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
   141,   142,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,   143,   144,     0,     0,     0,   145,   146,     0,
     0,   158,   502,   160,   161,     0,   162,   163,     0,     0,
     0,     0,     0,     0,    97,    98,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   164,     0,     0,     0,   165,   166,     0,     0,    11,    12,
     0,     0,     0,     0,   168,   123,   124,   125,   126,    21,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,   139,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,   140,
    72,    73,    74,   141,   142,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,   143,   144,     0,     0,     0,
   145,   146,   255,   256,   257,   258,   259,   260,     0,     0,
   147,     0,     0,     0,   261,   262,   263,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   362,
   234,    11,    12,     0,     0,   210,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,     0,     0,     0,
     0,     0,     0,    96,     0,     0,    10,    11,    12,     0,
    97,    98,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,     0,     0,     0,     0,     0,     0,    96,
     0,    11,    12,     0,     0,     0,    97,    98,   123,   124,
   125,   126,    21,   127,   128,   129,   130,   131,   132,   133,
   134,   135,   136,   137,   138,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,   139,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,   140,    72,    73,    74,   141,   142,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,   143,   144,
     0,     0,     0,   145,   146,     0,   363,   364,   365,   366,
   560,   367,     0,   147,   368,   369,     0,   370,     0,   371,
   372,   373,   374,     0,     0,     0,     0,     0,     0,     0,
     0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
   384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
   394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
   404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
   414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
   424,   363,   364,   365,   366,     0,   367,     0,     0,   368,
   369,     0,   370,     0,   371,   372,   373,   374,     0,     0,
     0,     0,     0,     0,     0,     0,   375,   376,   377,   378,
   379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
   389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
   399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
   409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
   419,   420,   421,   422,   423,   424,   255,   256,   257,   258,
   259,   260,     0,     0,     0,     0,     0,     0,   261,   262,
   263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,     0,     0,
     0,     0,     0,   428,   261,   262,   263,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   255,   256,
   257,   258,   259,   260,     0,     0,     0,     0,     0,   429,
   261,   262,   263,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   264,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   255,   256,   257,   258,   259,   260,
     0,     0,     0,     0,     0,   438,   261,   262,   263,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   264,     0,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   255,   256,   257,   258,   259,   260,     0,     0,     0,     0,
     0,   439,   261,   262,   263,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   264,     0,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   255,   256,   257,   258,
   259,   260,     0,     0,     0,     0,     0,   440,   261,   262,
   263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,     0,     0,
     0,     0,     0,   446,   261,   262,   263,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   255,   256,
   257,   258,   259,   260,     0,     0,     0,     0,     0,   451,
   261,   262,   263,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   264,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   255,   256,   257,   258,   259,   260,
     0,     0,     0,     0,     0,   455,   261,   262,   263,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   264,     0,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   255,   256,   257,   258,   259,   260,     0,     0,     0,     0,
     0,   457,   261,   262,   263,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   264,     0,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   255,   256,   257,   258,
   259,   260,     0,     0,     0,     0,     0,   520,   261,   262,
   263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,     0,     0,
     0,     0,     0,   536,   261,   262,   263,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   255,   256,
   257,   258,   259,   260,     0,     0,     0,     0,     0,   582,
   261,   262,   263,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   264,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   255,   256,   257,   258,   259,   260,
     0,     0,     0,     0,     0,   583,   261,   262,   263,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   264,     0,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   255,   256,   257,   258,   259,   260,     0,     0,     0,     0,
     0,   593,   261,   262,   263,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   264,     0,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   255,   256,   257,   258,
   259,   260,   463,     0,     0,     0,     0,     0,   261,   262,
   263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,   508,     0,
     0,     0,     0,     0,   261,   262,   263,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   255,   256,
   257,   258,   259,   260,   579,     0,     0,     0,     0,     0,
   261,   262,   263,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   264,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,     0,     0,     0,     0,   516,   517,
   255,   256,   257,   258,   259,   260,     0,     0,     0,     0,
     0,     0,   261,   262,   263,     0,     0,     0,     0,   436,
     0,     0,     0,     0,   264,     0,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   255,   256,   257,   258,
   259,   260,     0,     0,     0,     0,     0,     0,   261,   262,
   263,     0,     0,     0,     0,   441,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,     0,     0,
     0,     0,     0,     0,   261,   262,   263,     0,     0,     0,
     0,   444,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   255,   256,
   257,   258,   259,   260,     0,     0,     0,     0,     0,     0,
   261,   262,   263,     0,     0,     0,     0,   445,     0,     0,
     0,     0,   264,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   255,   256,   257,   258,   259,   260,
     0,     0,     0,     0,     0,     0,   261,   262,   263,     0,
     0,     0,     0,   447,     0,     0,     0,     0,   264,     0,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   255,   256,   257,   258,   259,   260,     0,     0,     0,     0,
     0,     0,   261,   262,   263,     0,     0,     0,     0,   448,
     0,     0,     0,     0,   264,     0,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   255,   256,   257,   258,
   259,   260,     0,     0,     0,     0,     0,     0,   261,   262,
   263,     0,     0,     0,     0,   449,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,     0,     0,
     0,     0,     0,     0,   261,   262,   263,     0,     0,     0,
     0,   450,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   255,   256,
   257,   258,   259,   260,     0,     0,     0,     0,     0,     0,
   261,   262,   263,     0,     0,     0,     0,   452,     0,     0,
     0,     0,   264,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   255,   256,   257,   258,   259,   260,
     0,     0,     0,     0,     0,     0,   261,   262,   263,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   264,   481,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   255,   256,   257,   258,   259,   260,     0,     0,     0,     0,
     0,     0,   261,   262,   263,     0,     0,     0,     0,   537,
     0,     0,     0,     0,   264,     0,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   255,   256,   257,   258,
   259,   260,     0,     0,     0,     0,     0,     0,   261,   262,
   263,     0,     0,     0,     0,   540,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,     0,     0,
     0,     0,     0,     0,   261,   262,   263,     0,     0,     0,
     0,   541,     0,     0,     0,     0,   264,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274,   255,   256,
   257,   258,   259,   260,     0,     0,     0,     0,     0,     0,
   261,   262,   263,     0,     0,     0,     0,   584,     0,     0,
     0,     0,   264,     0,   265,   266,   267,   268,   269,   270,
   271,   272,   273,   274,   255,   256,   257,   258,   259,   260,
     0,     0,     0,     0,     0,     0,   261,   262,   263,     0,
     0,     0,     0,   589,     0,     0,     0,     0,   264,     0,
   265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
   255,   256,   257,   258,   259,   260,     0,     0,     0,     0,
     0,     0,   261,   262,   263,     0,     0,     0,     0,   591,
     0,     0,     0,     0,   264,     0,   265,   266,   267,   268,
   269,   270,   271,   272,   273,   274,   255,   256,   257,   258,
   259,   260,     0,     0,     0,     0,     0,     0,   261,   262,
   263,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   264,     0,   265,   266,   267,   268,   269,   270,   271,   272,
   273,   274,   255,   256,   257,   258,   259,   260,     0,     0,
     0,     0,     0,     0,   261,   262,   263,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   265,   266,
   267,   268,   269,   270,   271,   272,   273,   274
};

static const short yycheck[] = {     1,
     9,   150,   182,   245,   184,     1,    10,     9,   182,     8,
   184,     1,   127,     9,   425,   153,   196,     1,   127,     9,
   127,   127,   196,     1,   127,     9,   127,   127,   127,   209,
   127,     9,   127,   114,   115,   150,   153,     4,   148,   149,
   282,   154,   154,    10,    12,   225,   155,   128,   155,   155,
   154,   225,   155,   151,   155,   155,   155,   152,   155,    90,
    91,   154,   242,   148,   149,   245,   500,   501,   242,   503,
   154,   505,   154,   253,   154,   106,   141,   142,   143,   253,
   101,   102,   103,   104,   105,   106,   148,   149,   154,   153,
    99,   139,   140,   141,   142,   143,   154,    99,   154,   101,
   154,   154,   282,    99,   154,   101,   155,   154,   154,    99,
   154,   101,   154,   524,   154,    99,   154,   101,   154,   154,
   154,    99,   154,   101,   128,   154,   154,   154,   154,   119,
   154,   154,   154,   117,   154,   154,   154,   154,   154,   117,
   154,   154,   128,   154,   127,   106,   154,   127,   150,   155,
   155,    10,   155,   152,   150,   155,   153,   120,   121,   122,
   150,   155,   155,   155,   155,   154,   150,   155,   127,   151,
   155,   105,   150,   136,   137,   138,   139,   140,   141,   142,
   143,   330,   155,   150,   174,   120,   121,   122,   172,   155,
   155,   151,   154,   106,   172,   106,   154,   133,   106,   154,
   153,   155,   211,   155,   139,   140,   141,   142,   143,   211,
   108,   109,   110,   111,   155,   211,   155,     6,   155,   102,
   462,   211,   120,   121,   122,   127,     8,   211,   155,   155,
   127,   155,   155,   211,   155,   155,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   155,   133,   490,   216,
     0,     0,   482,   101,   551,   467,   518,   244,   450,   108,
   109,   110,   111,   112,   113,   232,   493,   234,   510,   243,
   483,   120,   121,   122,   561,    -1,   243,   244,   458,    -1,
    -1,    -1,   462,   132,   458,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
   490,    -1,   492,    -1,   281,    -1,   283,    -1,   492,    -1,
    -1,    -1,    -1,    -1,   333,   334,    -1,    -1,   330,   331,
   510,   333,   334,    -1,   330,   331,    -1,   333,   334,    -1,
   330,    -1,    -1,   333,   334,    -1,   330,    -1,    -1,   333,
   334,    -1,   330,   320,    -1,   333,   334,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   331,    14,    15,    16,    17,   518,
    19,    -1,    -1,    22,    23,    -1,    25,    -1,    27,    28,
    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,    -1,
    -1,    -1,   123,   124,   125,    -1,   465,   128,   129,   130,
   131,    13,    -1,   465,    -1,   467,    -1,    -1,    -1,   465,
   479,   467,    -1,   482,    -1,   465,    -1,   479,    -1,    -1,
   482,   465,    -1,   479,    -1,    -1,   482,   465,    -1,   479,
    -1,    -1,   482,    -1,    -1,   479,    -1,   464,   482,    -1,
   467,   479,    -1,   152,   482,    -1,   515,    -1,    -1,    -1,
   519,    -1,    -1,   515,   523,    -1,   518,   519,    -1,   515,
    -1,   523,   518,   519,    -1,   515,   493,   523,   518,   519,
    -1,   515,    -1,   523,   518,   519,    -1,   515,    -1,   523,
   518,   519,    -1,    -1,   553,   523,    -1,    -1,    -1,   516,
    -1,   553,    -1,    -1,    -1,    -1,    -1,   553,    -1,    -1,
    -1,    -1,    -1,   553,    -1,    -1,    -1,    -1,    -1,   553,
    -1,   580,    -1,    -1,    -1,   553,   585,    -1,   580,    -1,
    -1,    -1,    -1,   585,   580,    -1,    -1,    -1,    -1,   585,
   580,    -1,    -1,    -1,    -1,   585,   580,   149,    -1,   151,
   152,   585,   580,    -1,    -1,    -1,    -1,   585,    -1,    -1,
    -1,    -1,   164,   165,   166,    -1,   168,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   177,    -1,   179,   180,    -1,
    -1,   183,    -1,   185,   186,   187,   188,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   197,   198,   199,   200,   201,
   202,   203,   204,   205,    -1,   207,   208,   108,   109,   110,
   111,   112,   113,    -1,    -1,   217,    -1,    -1,    -1,   120,
   121,   122,    -1,    -1,    -1,    -1,    -1,   229,    -1,    -1,
    -1,   132,    -1,   134,   135,   136,   137,   138,   139,   140,
   141,   142,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   153,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
   272,   273,   274,   108,   109,   110,   111,   112,   113,    -1,
    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,
    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   321,
   155,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,   331,
   332,    -1,    -1,   335,    -1,    -1,    -1,    15,    16,    -1,
    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    -1,    -1,    -1,    97,
    98,    -1,    -1,   101,   102,   103,   104,    -1,   106,   107,
    -1,    -1,    -1,    -1,   436,    -1,   114,   115,    -1,   441,
    -1,    -1,   444,   445,    -1,   447,   448,   449,   450,    -1,
   452,    -1,    -1,    -1,    -1,    -1,   108,   109,   110,   111,
   112,   113,   140,    -1,    -1,   467,   144,   145,   120,   121,
   122,   149,    -1,   151,    -1,    -1,   154,    -1,    -1,   481,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,    -1,   108,   109,   110,   111,   112,   113,    -1,
    -1,    -1,    -1,   155,    -1,   120,   121,   122,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   517,    -1,   132,    -1,   134,
   135,   136,   137,   138,   139,   140,   141,   142,   143,   108,
   109,   110,   111,   112,   113,    -1,    -1,    -1,   540,   541,
   155,   120,   121,   122,   546,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,
   139,   140,   141,   142,   143,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   155,    -1,    -1,    -1,
    -1,    -1,   584,    -1,     3,     4,     5,   589,     7,   591,
     9,    -1,    11,    12,    13,    14,    15,    16,    17,    -1,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
    99,   100,    -1,    -1,    -1,    -1,   109,   110,   107,    -1,
    -1,    -1,    -1,    -1,    -1,   114,   115,   120,   121,   122,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   134,   135,   136,   137,   138,   139,   140,   141,   142,
   143,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,
    -1,     7,   151,     9,   153,    11,    12,    13,    14,    15,
    16,    17,    -1,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,    -1,
    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   151,   152,   153,     3,     4,
    -1,    -1,     7,    -1,     9,    -1,    11,    12,    13,    14,
    15,    16,    17,    -1,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
    55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,    -1,
    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,   114,
   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,     3,
     4,    -1,    -1,     7,    -1,     9,    -1,    11,    12,    13,
    14,    15,    16,    17,    -1,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,
   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   151,   152,   153,
     3,     4,    -1,    -1,     7,    -1,     9,    -1,    11,    12,
    13,    14,    15,    16,    17,    -1,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    94,    95,    96,    97,    98,    99,   100,    -1,    -1,
    -1,    -1,    -1,    -1,   107,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     5,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    15,    16,    -1,   151,    -1,
   153,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    -1,    -1,    -1,    97,    98,    -1,
    -1,   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,
    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
   140,    -1,    -1,    -1,   144,   145,    -1,    -1,    -1,    15,
    16,    -1,    -1,   153,   154,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    -1,    -1,
    -1,    97,    98,    -1,    -1,   101,   102,   103,   104,    -1,
   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     5,   140,    -1,    -1,    -1,   144,   145,
    -1,    -1,    -1,    15,    16,    -1,    -1,    -1,   154,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    93,    -1,    -1,    -1,    97,    98,    -1,    -1,   101,
   102,   103,   104,    -1,   106,   107,    -1,    -1,    -1,    -1,
    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,   140,    -1,
    -1,    -1,   144,   145,    -1,    -1,    -1,    15,    16,    -1,
    -1,    -1,   154,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    -1,    -1,    -1,    97,
    98,    -1,    -1,   101,   102,   103,   104,    -1,   106,   107,
    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     5,   140,    -1,    -1,    -1,   144,   145,    -1,    -1,
    -1,    15,    16,    -1,    -1,    -1,   154,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    -1,    -1,    -1,    97,    98,    -1,    -1,   101,   102,   103,
   104,    -1,   106,   107,    -1,    -1,    -1,    -1,    -1,    -1,
   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     5,   140,    -1,    -1,    -1,
   144,   145,    -1,    -1,    -1,    15,    16,    -1,    -1,    -1,
   154,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    -1,    -1,    -1,    97,    98,    -1,
    -1,   101,   102,   103,   104,    -1,   106,   107,    -1,    -1,
    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   140,    -1,    -1,    -1,   144,   145,    -1,    -1,    15,    16,
    -1,    -1,    -1,    -1,   154,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    -1,    -1,    -1,
    97,    98,   108,   109,   110,   111,   112,   113,    -1,    -1,
   107,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   155,
    14,    15,    16,    -1,    -1,   152,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    95,    96,    97,    98,    99,   100,    -1,    -1,    -1,
    -1,    -1,    -1,   107,    -1,    -1,    14,    15,    16,    -1,
   114,   115,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
    98,    99,   100,    -1,    -1,    -1,    -1,    -1,    -1,   107,
    -1,    15,    16,    -1,    -1,    -1,   114,   115,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    -1,    -1,    -1,    97,    98,    -1,    14,    15,    16,    17,
    18,    19,    -1,   107,    22,    23,    -1,    25,    -1,    27,
    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,    14,    15,    16,    17,    -1,    19,    -1,    -1,    22,
    23,    -1,    25,    -1,    27,    28,    29,    30,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,   108,   109,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,    -1,    -1,
    -1,    -1,    -1,   155,   120,   121,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   108,   109,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,   155,
   120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   108,   109,   110,   111,   112,   113,
    -1,    -1,    -1,    -1,    -1,   155,   120,   121,   122,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
    -1,   155,   120,   121,   122,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   108,   109,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,   155,   120,   121,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,    -1,    -1,
    -1,    -1,    -1,   155,   120,   121,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   108,   109,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,   155,
   120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   108,   109,   110,   111,   112,   113,
    -1,    -1,    -1,    -1,    -1,   155,   120,   121,   122,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
    -1,   155,   120,   121,   122,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   108,   109,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,   155,   120,   121,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,    -1,    -1,
    -1,    -1,    -1,   155,   120,   121,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   108,   109,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,   155,
   120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   108,   109,   110,   111,   112,   113,
    -1,    -1,    -1,    -1,    -1,   155,   120,   121,   122,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
    -1,   155,   120,   121,   122,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   108,   109,   110,   111,
   112,   113,   150,    -1,    -1,    -1,    -1,    -1,   120,   121,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,   150,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   108,   109,
   110,   111,   112,   113,   150,    -1,    -1,    -1,    -1,    -1,
   120,   121,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,    -1,    -1,    -1,    -1,   148,   149,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
    -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
    -1,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   108,   109,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   108,   109,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
   120,   121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   108,   109,   110,   111,   112,   113,
    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
    -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
    -1,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   108,   109,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   108,   109,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
   120,   121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   108,   109,   110,   111,   112,   113,
    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   132,   133,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
    -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
    -1,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   108,   109,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   108,   109,
   110,   111,   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,
   120,   121,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
    -1,    -1,   132,    -1,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   108,   109,   110,   111,   112,   113,
    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,    -1,
    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,   132,    -1,
   134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
   108,   109,   110,   111,   112,   113,    -1,    -1,    -1,    -1,
    -1,    -1,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
    -1,    -1,    -1,    -1,   132,    -1,   134,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   108,   109,   110,   111,
   112,   113,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   132,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
   142,   143,   108,   109,   110,   111,   112,   113,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in sbytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 139 "swf5compiler.y"
{ bf = newBuffer();
		bc = newBuffer();
	;
    break;}
case 2:
#line 142 "swf5compiler.y"
{ Buffer b = newBuffer();
		  bufferWriteConstants(b);
		  bufferConcat(b, bf);
		  bufferConcat(b, bc);
		  *((Buffer *)buffer) = b; ;
    break;}
case 5:
#line 155 "swf5compiler.y"
{ bufferConcat(bc, yyvsp[0].action); ;
    break;}
case 6:
#line 157 "swf5compiler.y"
{ bufferConcat(bf, yyvsp[0].action); ;
    break;}
case 7:
#line 162 "swf5compiler.y"
{ yyval.action = yyvsp[0].action; ;
    break;}
case 8:
#line 165 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 9:
#line 170 "swf5compiler.y"
{ ;
    break;}
case 10:
#line 174 "swf5compiler.y"
{ yyval.action = NULL; ;
    break;}
case 11:
#line 175 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action; ;
    break;}
case 12:
#line 176 "swf5compiler.y"
{ yyval.action = NULL; ;
    break;}
case 13:
#line 177 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action; ;
    break;}
case 21:
#line 189 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferWriteOp(yyval.action, SWFACTION_WITH);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[-1].action));
		  bufferConcat(yyval.action, yyvsp[-1].action); ;
    break;}
case 22:
#line 198 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteNull(yyval.action);
		  bufferWriteOp(yyval.action, SWFACTION_RETURN); ;
    break;}
case 23:
#line 203 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_RETURN); ;
    break;}
case 25:
#line 209 "swf5compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action); ;
    break;}
case 26:
#line 214 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[-2].action));
		  bufferConcat(yyval.action, yyvsp[-2].action); ;
    break;}
case 27:
#line 225 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferWriteOp(yyval.action, SWFACTION_LOGICALNOT);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action));
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 28:
#line 233 "swf5compiler.y"
{ yyval.action = NULL; ;
    break;}
case 29:
#line 234 "swf5compiler.y"
{ yyval.action = yyvsp[0].action; ;
    break;}
case 30:
#line 240 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action; ;
    break;}
case 31:
#line 242 "swf5compiler.y"
{ bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferResolveJumps(yyval.action);
 /* FIXME: continue in switch continues surrounding loop, if any */
	;
    break;}
case 32:
#line 251 "swf5compiler.y"
{ yyval.action = yyvsp[0].action; ;
    break;}
case 33:
#line 254 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 34:
#line 260 "swf5compiler.y"
{ yyval.action = newBuffer(); ;
    break;}
case 36:
#line 268 "swf5compiler.y"
{ yyval.str = _strdup("new"); ;
    break;}
case 37:
#line 269 "swf5compiler.y"
{ yyval.str = _strdup("delete"); ;
    break;}
case 38:
#line 270 "swf5compiler.y"
{ yyval.str = _strdup("random"); ;
    break;}
case 39:
#line 271 "swf5compiler.y"
{ yyval.str = _strdup("getTimer"); ;
    break;}
case 40:
#line 272 "swf5compiler.y"
{ yyval.str = _strdup("length"); ;
    break;}
case 41:
#line 273 "swf5compiler.y"
{ yyval.str = _strdup("concat"); ;
    break;}
case 42:
#line 274 "swf5compiler.y"
{ yyval.str = _strdup("substr"); ;
    break;}
case 43:
#line 275 "swf5compiler.y"
{ yyval.str = _strdup("trace"); ;
    break;}
case 44:
#line 276 "swf5compiler.y"
{ yyval.str = _strdup("int"); ;
    break;}
case 45:
#line 277 "swf5compiler.y"
{ yyval.str = _strdup("ord"); ;
    break;}
case 46:
#line 278 "swf5compiler.y"
{ yyval.str = _strdup("chr"); ;
    break;}
case 47:
#line 279 "swf5compiler.y"
{ yyval.str = _strdup("getURL"); ;
    break;}
case 48:
#line 280 "swf5compiler.y"
{ yyval.str = _strdup("getURL1"); ;
    break;}
case 49:
#line 281 "swf5compiler.y"
{ yyval.str = _strdup("nextFrame"); ;
    break;}
case 50:
#line 282 "swf5compiler.y"
{ yyval.str = _strdup("prevFrame"); ;
    break;}
case 51:
#line 283 "swf5compiler.y"
{ yyval.str = _strdup("play"); ;
    break;}
case 52:
#line 284 "swf5compiler.y"
{ yyval.str = _strdup("stop"); ;
    break;}
case 53:
#line 285 "swf5compiler.y"
{ yyval.str = _strdup("toggleQuality"); ;
    break;}
case 54:
#line 286 "swf5compiler.y"
{ yyval.str = _strdup("stopSounds"); ;
    break;}
case 55:
#line 287 "swf5compiler.y"
{ yyval.str = _strdup("dup"); ;
    break;}
case 56:
#line 288 "swf5compiler.y"
{ yyval.str = _strdup("swap"); ;
    break;}
case 57:
#line 289 "swf5compiler.y"
{ yyval.str = _strdup("pop"); ;
    break;}
case 58:
#line 290 "swf5compiler.y"
{ yyval.str = _strdup("push"); ;
    break;}
case 59:
#line 291 "swf5compiler.y"
{ yyval.str = _strdup("setRegister"); ;
    break;}
case 60:
#line 292 "swf5compiler.y"
{ yyval.str = _strdup("callFunction"); ;
    break;}
case 61:
#line 293 "swf5compiler.y"
{ yyval.str = _strdup("callMethod"); ;
    break;}
case 62:
#line 294 "swf5compiler.y"
{ yyval.str = _strdup("and"); ;
    break;}
case 63:
#line 295 "swf5compiler.y"
{ yyval.str = _strdup("or"); ;
    break;}
case 64:
#line 296 "swf5compiler.y"
{ yyval.str = _strdup("xor"); ;
    break;}
case 65:
#line 297 "swf5compiler.y"
{ yyval.str = _strdup("modulo"); ;
    break;}
case 66:
#line 298 "swf5compiler.y"
{ yyval.str = _strdup("add"); ;
    break;}
case 67:
#line 299 "swf5compiler.y"
{ yyval.str = _strdup("lessThan"); ;
    break;}
case 68:
#line 300 "swf5compiler.y"
{ yyval.str = _strdup("equals"); ;
    break;}
case 69:
#line 301 "swf5compiler.y"
{ yyval.str = _strdup("inc"); ;
    break;}
case 70:
#line 302 "swf5compiler.y"
{ yyval.str = _strdup("dec"); ;
    break;}
case 71:
#line 303 "swf5compiler.y"
{ yyval.str = _strdup("typeof"); ;
    break;}
case 72:
#line 304 "swf5compiler.y"
{ yyval.str = _strdup("enumerate"); ;
    break;}
case 73:
#line 305 "swf5compiler.y"
{ yyval.str = _strdup("initobject"); ;
    break;}
case 74:
#line 306 "swf5compiler.y"
{ yyval.str = _strdup("initarray"); ;
    break;}
case 75:
#line 307 "swf5compiler.y"
{ yyval.str = _strdup("getmember"); ;
    break;}
case 76:
#line 308 "swf5compiler.y"
{ yyval.str = _strdup("setmember"); ;
    break;}
case 77:
#line 309 "swf5compiler.y"
{ yyval.str = _strdup("shiftleft"); ;
    break;}
case 78:
#line 310 "swf5compiler.y"
{ yyval.str = _strdup("shiftright"); ;
    break;}
case 79:
#line 311 "swf5compiler.y"
{ yyval.str = _strdup("shiftright2"); ;
    break;}
case 80:
#line 312 "swf5compiler.y"
{ yyval.str = _strdup("varequals"); ;
    break;}
case 81:
#line 313 "swf5compiler.y"
{ yyval.str = _strdup("oldAdd"); ;
    break;}
case 82:
#line 314 "swf5compiler.y"
{ yyval.str = _strdup("subtract"); ;
    break;}
case 83:
#line 315 "swf5compiler.y"
{ yyval.str = _strdup("multiply"); ;
    break;}
case 84:
#line 316 "swf5compiler.y"
{ yyval.str = _strdup("divide"); ;
    break;}
case 85:
#line 317 "swf5compiler.y"
{ yyval.str = _strdup("oldequals"); ;
    break;}
case 86:
#line 318 "swf5compiler.y"
{ yyval.str = _strdup("oldlessthan"); ;
    break;}
case 87:
#line 319 "swf5compiler.y"
{ yyval.str = _strdup("logicaland"); ;
    break;}
case 88:
#line 320 "swf5compiler.y"
{ yyval.str = _strdup("logicalor"); ;
    break;}
case 89:
#line 321 "swf5compiler.y"
{ yyval.str = _strdup("not"); ;
    break;}
case 90:
#line 322 "swf5compiler.y"
{ yyval.str = _strdup("stringeq"); ;
    break;}
case 91:
#line 323 "swf5compiler.y"
{ yyval.str = _strdup("stringlength"); ;
    break;}
case 92:
#line 324 "swf5compiler.y"
{ yyval.str = _strdup("substring"); ;
    break;}
case 93:
#line 325 "swf5compiler.y"
{ yyval.str = _strdup("getvariable"); ;
    break;}
case 94:
#line 326 "swf5compiler.y"
{ yyval.str = _strdup("setvariable"); ;
    break;}
case 95:
#line 327 "swf5compiler.y"
{ yyval.str = _strdup("settargetexpression"); ;
    break;}
case 96:
#line 328 "swf5compiler.y"
{ yyval.str = _strdup("duplicatemovieclip"); ;
    break;}
case 97:
#line 329 "swf5compiler.y"
{ yyval.str = _strdup("removemovieclip"); ;
    break;}
case 98:
#line 330 "swf5compiler.y"
{ yyval.str = _strdup("startdrag"); ;
    break;}
case 99:
#line 331 "swf5compiler.y"
{ yyval.str = _strdup("stopdrag"); ;
    break;}
case 100:
#line 332 "swf5compiler.y"
{ yyval.str = _strdup("stringlessthan"); ;
    break;}
case 101:
#line 333 "swf5compiler.y"
{ yyval.str = _strdup("mblength"); ;
    break;}
case 102:
#line 334 "swf5compiler.y"
{ yyval.str = _strdup("mbsubstring"); ;
    break;}
case 103:
#line 335 "swf5compiler.y"
{ yyval.str = _strdup("mbord"); ;
    break;}
case 104:
#line 336 "swf5compiler.y"
{ yyval.str = _strdup("mbchr"); ;
    break;}
case 105:
#line 337 "swf5compiler.y"
{ yyval.str = _strdup("branchalways"); ;
    break;}
case 106:
#line 338 "swf5compiler.y"
{ yyval.str = _strdup("branchiftrue"); ;
    break;}
case 107:
#line 339 "swf5compiler.y"
{ yyval.str = _strdup("getURL2"); ;
    break;}
case 108:
#line 340 "swf5compiler.y"
{ yyval.str = _strdup("post"); ;
    break;}
case 109:
#line 341 "swf5compiler.y"
{ yyval.str = _strdup("get"); ;
    break;}
case 110:
#line 342 "swf5compiler.y"
{ yyval.str = _strdup("loadvariables"); ;
    break;}
case 111:
#line 343 "swf5compiler.y"
{ yyval.str = _strdup("loadmovie"); ;
    break;}
case 112:
#line 348 "swf5compiler.y"
{ yyval.exprlist.buffer = newBuffer();
		  yyval.exprlist.count = 0; ;
    break;}
case 113:
#line 352 "swf5compiler.y"
{ yyval.exprlist.buffer = newBuffer();
		  bufferWriteHardString(yyval.exprlist.buffer, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  yyval.exprlist.count = 1; ;
    break;}
case 114:
#line 357 "swf5compiler.y"
{ yyval.exprlist = yyvsp[-2].exprlist;
		  bufferWriteHardString(yyval.exprlist.buffer, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  ++yyval.exprlist.count; ;
    break;}
case 115:
#line 364 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_DEFINEFUNCTION);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-4].str) +
				     bufferLength(yyvsp[-2].exprlist.buffer) + 5);
		  bufferWriteHardString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteS16(yyval.action, yyvsp[-2].exprlist.count);
		  bufferConcat(yyval.action, yyvsp[-2].exprlist.buffer);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action));
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 116:
#line 377 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 117:
#line 382 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  bufferWriteOp(yyval.action, SWFACTION_GETMEMBER);
		  free(yyvsp[0].str); ;
    break;}
case 118:
#line 388 "swf5compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); ;
    break;}
case 121:
#line 399 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferWriteOp(yyval.action, SWFACTION_LOGICALNOT);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, -(bufferLength(yyval.action)+2));
		  bufferResolveJumps(yyval.action); ;
    break;}
case 122:
#line 411 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, -(bufferLength(yyval.action)+2));
		  bufferResolveJumps(yyval.action); ;
    break;}
case 123:
#line 419 "swf5compiler.y"
{
		  if (yyvsp[-6].action)
		    yyval.action = yyvsp[-6].action;
		  else
		    yyval.action = newBuffer();

		  if (yyvsp[-2].action)
		  {
                    bufferWriteOp(yyval.action, SWFACTION_BRANCHALWAYS);
                    bufferWriteS16(yyval.action, 2);
                    bufferWriteS16(yyval.action, bufferLength(yyvsp[-2].action));
		  }
		  else
		    yyvsp[-2].action = newBuffer();

		  if (yyvsp[-4].action)
		  {
		    bufferConcat(yyvsp[-2].action, yyvsp[-4].action);
                    bufferWriteOp(yyvsp[-2].action, SWFACTION_LOGICALNOT);
                    bufferWriteOp(yyvsp[-2].action, SWFACTION_BRANCHIFTRUE);
                    bufferWriteS16(yyvsp[-2].action, 2);
                    bufferWriteS16(yyvsp[-2].action, bufferLength(yyvsp[0].action)+5);
                  }

                  bufferConcat(yyvsp[-2].action, yyvsp[0].action);
                  bufferWriteOp(yyvsp[-2].action, SWFACTION_BRANCHALWAYS);
                  bufferWriteS16(yyvsp[-2].action, 2);
                  bufferWriteS16(yyvsp[-2].action, -(bufferLength(yyvsp[-2].action)+2));
                  bufferResolveJumps(yyvsp[-2].action);

                  bufferConcat(yyval.action, yyvsp[-2].action);
                ;
    break;}
case 124:
#line 453 "swf5compiler.y"
{ Buffer b2, b3;
		  int tmp;

		  yyval.action = yyvsp[-2].action;
		  bufferWriteOp(yyval.action, SWFACTION_ENUMERATE);

		  b2 = newBuffer();
		  bufferWriteSetRegister(b2, 0);
		  bufferWriteOp(b2, SWFACTION_PUSHDATA);
		  bufferWriteS16(b2, 1);
		  bufferWriteU8(b2, 2);
		  bufferWriteOp(b2, SWFACTION_NEWEQUALS);
		  bufferWriteOp(b2, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(b2, 2);

		  b3 = newBuffer();
/* basically a lvalue could be used here rather than an ident !!! */
/* probably by using reg1 for the test rather than reg0 */
		  bufferWriteString(b3, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteRegister(b3, 0);
		  bufferWriteOp(b3, SWFACTION_SETVARIABLE);
		  bufferConcat(b3, yyvsp[0].action);
		  bufferWriteS16(b2, bufferLength(b3) + 5);
		  tmp = bufferLength(b2) + bufferLength(b3) + 5;
		  bufferConcat(yyval.action, b2);
		  bufferConcat(yyval.action, b3);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, -tmp); ;
    break;}
case 125:
#line 484 "swf5compiler.y"
{ Buffer b2, b3;
		  int tmp;

		  yyval.action = yyvsp[-2].action;
		  bufferWriteOp(yyval.action, SWFACTION_ENUMERATE);

		  b2 = newBuffer();
		  bufferWriteSetRegister(b2, 0);
		  bufferWriteOp(b2, SWFACTION_PUSHDATA);
		  bufferWriteS16(b2, 1);
		  bufferWriteU8(b2, 2);
		  bufferWriteOp(b2, SWFACTION_NEWEQUALS);
		  bufferWriteOp(b2, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(b2, 2);
		  // add size later

		  b3 = newBuffer();
		  bufferWriteString(b3, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteRegister(b3, 0);
		  bufferWriteOp(b3, SWFACTION_VAREQUALS);
		  bufferConcat(b3, yyvsp[0].action);
		  bufferWriteS16(b2, bufferLength(b3) + 5);
		  tmp = bufferLength(b2) + bufferLength(b3) + 5;
		  bufferConcat(yyval.action, b2);
		  bufferConcat(yyval.action, b3);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, -tmp); ;
    break;}
case 126:
#line 515 "swf5compiler.y"
{ yyval.action = NULL; ;
    break;}
case 128:
#line 521 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, MAGIC_CONTINUE_NUMBER); ;
    break;}
case 129:
#line 529 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, MAGIC_BREAK_NUMBER); ;
    break;}
case 130:
#line 536 "swf5compiler.y"
{ yyval.getURLMethod = GETURL_METHOD_NOSEND; ;
    break;}
case 131:
#line 538 "swf5compiler.y"
{ yyval.getURLMethod = GETURL_METHOD_GET; ;
    break;}
case 132:
#line 540 "swf5compiler.y"
{ yyval.getURLMethod = GETURL_METHOD_POST; ;
    break;}
case 133:
#line 542 "swf5compiler.y"
{ if (strcmp(yyvsp[0].str, "GET") == 0)
				    yyval.getURLMethod = GETURL_METHOD_GET;
				  else if (strcmp(yyvsp[0].str, "POST") == 0)
				    yyval.getURLMethod = GETURL_METHOD_POST; ;
    break;}
case 134:
#line 550 "swf5compiler.y"
{ char *lvlstring = (char *)malloc(12*sizeof(char));
		  sprintf(lvlstring, "_level%d", yyvsp[0].intVal);
		  yyval.action = newBuffer();
		  bufferWriteString(yyval.action, lvlstring, strlen(lvlstring)+1);
		  free(lvlstring); ;
    break;}
case 135:
#line 557 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, "_level", 7);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_STRINGCONCAT); ;
    break;}
case 136:
#line 566 "swf5compiler.y"
{ yyval.action = yyvsp[-1].exprlist.buffer;
		  bufferWriteInt(yyval.action, yyvsp[-1].exprlist.count);
		  bufferWriteString(yyval.action, yyvsp[-3].str, strlen(yyvsp[-3].str)+1);
		  bufferWriteOp(yyval.action, SWFACTION_CALLFUNCTION);
		  bufferWriteOp(yyval.action, SWFACTION_POP);
		  free(yyvsp[-3].str); ;
    break;}
case 137:
#line 574 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_TRACE); ;
    break;}
case 138:
#line 578 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteOp(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, yyvsp[-1].getURLMethod); ;
    break;}
case 139:
#line 585 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteOp(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 0xc0+yyvsp[-1].getURLMethod); ;
    break;}
case 140:
#line 592 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteOp(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 0x80+yyvsp[-1].getURLMethod); ;
    break;}
case 141:
#line 599 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteOp(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 0x40+yyvsp[-1].getURLMethod); ;
    break;}
case 142:
#line 606 "swf5compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteOp(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, yyvsp[-1].getURLMethod); ;
    break;}
case 143:
#line 613 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_CALLFRAME);
		  bufferWriteS16(yyval.action, 0); ;
    break;}
case 144:
#line 619 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, "0", 2); /* no constraint */
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferWriteOp(yyval.action, SWFACTION_STARTDRAGMOVIE); ;
    break;}
case 145:
#line 626 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferConcat(yyval.action, yyvsp[-7].action);
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferConcat(yyval.action, yyvsp[-5].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteString(yyval.action, "1", 2); /* has constraint */
		  bufferConcat(yyval.action, yyvsp[-9].action);
		  bufferConcat(yyval.action, yyvsp[-11].action);
		  bufferWriteOp(yyval.action, SWFACTION_STARTDRAGMOVIE); ;
    break;}
case 146:
#line 637 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_STOPDRAGMOVIE); ;
    break;}
case 147:
#line 642 "swf5compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteInt(yyval.action, 16384); /* magic number */
		  bufferWriteOp(yyval.action, SWFACTION_ADD);
		  bufferWriteOp(yyval.action, SWFACTION_DUPLICATECLIP); ;
    break;}
case 148:
#line 650 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_REMOVECLIP); ;
    break;}
case 149:
#line 654 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_GETURL);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-3].str) + strlen(yyvsp[-1].str) + 2);
		  bufferWriteHardString(yyval.action, yyvsp[-3].str, strlen(yyvsp[-3].str));
		  bufferWriteU8(yyval.action, 0);
		  bufferWriteHardString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str));
		  bufferWriteU8(yyval.action, 0); ;
    break;}
case 150:
#line 664 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_NEXTFRAME); ;
    break;}
case 151:
#line 668 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_PREVFRAME); ;
    break;}
case 152:
#line 672 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_PLAY); ;
    break;}
case 153:
#line 676 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_STOP); ;
    break;}
case 154:
#line 680 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_STOPSOUNDS); ;
    break;}
case 155:
#line 684 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_TOGGLEQUALITY); ;
    break;}
case 156:
#line 688 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_GOTOFRAME);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, yyvsp[-1].intVal); ;
    break;}
case 157:
#line 694 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_GOTOLABEL);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-1].str)+1);
		  bufferWriteHardString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str)+1);
		  free(yyvsp[-1].str); ;
    break;}
case 158:
#line 701 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_GOTOEXPRESSION);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 0); ;
    break;}
case 159:
#line 707 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_SETTARGET);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-1].str)+1);
		  bufferWriteHardString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str)+1);
		  free(yyvsp[-1].str); ;
    break;}
case 160:
#line 714 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_SETTARGETEXPRESSION); ;
    break;}
case 161:
#line 723 "swf5compiler.y"
{ yyval.action = yyvsp[-1].exprlist.buffer;
		  bufferWriteInt(yyval.action, yyvsp[-1].exprlist.count);
		  bufferWriteString(yyval.action, yyvsp[-3].str, strlen(yyvsp[-3].str)+1);
		  bufferWriteOp(yyval.action, SWFACTION_CALLFUNCTION);
		  free(yyvsp[-3].str); ;
    break;}
case 162:
#line 730 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_GETVARIABLE); ;
    break;}
case 163:
#line 734 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_GETTIMER); ;
    break;}
case 164:
#line 738 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_RANDOM); ;
    break;}
case 165:
#line 742 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_STRINGLENGTH); ;
    break;}
case 166:
#line 746 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_INT); ;
    break;}
case 167:
#line 750 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_ORD); ;
    break;}
case 168:
#line 754 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_CHR); ;
    break;}
case 169:
#line 758 "swf5compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteOp(yyval.action, SWFACTION_STRINGCONCAT); ;
    break;}
case 170:
#line 763 "swf5compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteOp(yyval.action, SWFACTION_SUBSTRING); ;
    break;}
case 171:
#line 769 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteOp(yyval.action, SWFACTION_TYPEOF); ;
    break;}
case 172:
#line 776 "swf5compiler.y"
{ yyval.exprlist.buffer = newBuffer();
		  yyval.exprlist.count = 0; ;
    break;}
case 173:
#line 780 "swf5compiler.y"
{ yyval.exprlist.buffer = yyvsp[0].action;
		  yyval.exprlist.count = 1; ;
    break;}
case 174:
#line 785 "swf5compiler.y"
{ Buffer tmp = newBuffer();
		  bufferConcat(tmp, yyvsp[0].action);
		  bufferConcat(tmp, yyval.exprlist.buffer);
		  yyval.exprlist.buffer = tmp;
		  ++yyval.exprlist.count;  ;
    break;}
case 175:
#line 794 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteOp(yyval.action, SWFACTION_DEFINEFUNCTION);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[-2].exprlist.buffer) + 5);
		  bufferWriteU8(yyval.action, 0); /* empty function name */
		  bufferWriteS16(yyval.action, yyvsp[-2].exprlist.count);
		  bufferConcat(yyval.action, yyvsp[-2].exprlist.buffer);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action));
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 176:
#line 806 "swf5compiler.y"
{ yyval.action = yyvsp[-1].exprlist.buffer;
		  bufferWriteInt(yyval.action, yyvsp[-1].exprlist.count);
		  bufferConcat(yyval.action, yyvsp[-5].action);
		  bufferWriteString(yyval.action, yyvsp[-3].str, strlen(yyvsp[-3].str)+1);
		  bufferWriteOp(yyval.action, SWFACTION_CALLMETHOD);
		  free(yyvsp[-3].str); ;
    break;}
case 177:
#line 814 "swf5compiler.y"
{ yyval.action = yyvsp[-1].exprlist.buffer;
		  bufferWriteInt(yyval.action, yyvsp[-1].exprlist.count);
		  bufferConcat(yyval.action, yyvsp[-6].action);
		  bufferConcat(yyval.action, yyvsp[-4].action);
		  bufferWriteOp(yyval.action, SWFACTION_CALLMETHOD); ;
    break;}
case 178:
#line 823 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 179:
#line 830 "swf5compiler.y"
{ yyval.exprlist.buffer = yyvsp[0].action;
		  yyval.exprlist.count = 1; ;
    break;}
case 180:
#line 834 "swf5compiler.y"
{ bufferConcat(yyval.exprlist.buffer, yyvsp[0].action);
		  ++yyval.exprlist.count;  ;
    break;}
case 181:
#line 839 "swf5compiler.y"
{ yyval.op = SWFACTION_NEWADD; ;
    break;}
case 182:
#line 840 "swf5compiler.y"
{ yyval.op = SWFACTION_SUBTRACT; ;
    break;}
case 183:
#line 841 "swf5compiler.y"
{ yyval.op = SWFACTION_MULTIPLY; ;
    break;}
case 184:
#line 842 "swf5compiler.y"
{ yyval.op = SWFACTION_DIVIDE; ;
    break;}
case 185:
#line 843 "swf5compiler.y"
{ yyval.op = SWFACTION_BITWISEAND; ;
    break;}
case 186:
#line 844 "swf5compiler.y"
{ yyval.op = SWFACTION_BITWISEOR; ;
    break;}
case 187:
#line 845 "swf5compiler.y"
{ yyval.op = SWFACTION_BITWISEXOR; ;
    break;}
case 188:
#line 846 "swf5compiler.y"
{ yyval.op = SWFACTION_SHIFTLEFT; ;
    break;}
case 189:
#line 847 "swf5compiler.y"
{ yyval.op = SWFACTION_SHIFTRIGHT; ;
    break;}
case 190:
#line 848 "swf5compiler.y"
{ yyval.op = SWFACTION_SHIFTRIGHT2; ;
    break;}
case 191:
#line 852 "swf5compiler.y"
{ yyval.op = SWFACTION_INCREMENT; ;
    break;}
case 192:
#line 853 "swf5compiler.y"
{ yyval.op = SWFACTION_DECREMENT; ;
    break;}
case 193:
#line 872 "swf5compiler.y"
{ if (yyvsp[0].lval.obj)
		  {
		    yyval.action = yyvsp[0].lval.obj;

		    if (yyvsp[0].lval.ident)
		      bufferConcat(yyval.action, yyvsp[0].lval.ident);
		    else
		      bufferConcat(yyval.action, yyvsp[0].lval.memexpr);

		    bufferWriteOp(yyval.action, SWFACTION_GETMEMBER);
		  }
		  else
		  {
		    yyval.action = yyvsp[0].lval.ident;
		    bufferWriteOp(yyval.action, SWFACTION_GETVARIABLE);
		  }
		;
    break;}
case 194:
#line 894 "swf5compiler.y"
{ yyval.lval.ident = newBuffer();
		  bufferWriteString(yyval.lval.ident, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str);
		  yyval.lval.obj = 0;
		  yyval.lval.memexpr = 0; ;
    break;}
case 195:
#line 901 "swf5compiler.y"
{ yyval.lval.obj = yyvsp[-2].action;
		  yyval.lval.ident = newBuffer();
		  bufferWriteString(yyval.lval.ident, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  yyval.lval.memexpr = 0; ;
    break;}
case 196:
#line 907 "swf5compiler.y"
{ yyval.lval.obj = yyvsp[-3].action;
		  yyval.lval.memexpr = yyvsp[-1].action;
		  yyval.lval.ident = 0; ;
    break;}
case 198:
#line 917 "swf5compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteInt(yyvsp[0].action, -1);
		  bufferWriteOp(yyvsp[0].action, SWFACTION_MULTIPLY); ;
    break;}
case 199:
#line 922 "swf5compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteInt(yyvsp[0].action, 0xffff);
		  bufferWriteOp(yyvsp[0].action, SWFACTION_BITWISEXOR); ;
    break;}
case 200:
#line 927 "swf5compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteOp(yyvsp[0].action, SWFACTION_LOGICALNOT); ;
    break;}
case 201:
#line 931 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferWriteOp(yyval.action, SWFACTION_DUP);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+1);
		  bufferWriteOp(yyval.action, SWFACTION_POP);
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 202:
#line 940 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferWriteOp(yyval.action, SWFACTION_DUP);
		  bufferWriteOp(yyval.action, SWFACTION_LOGICALNOT);
		  bufferWriteOp(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+1);
		  bufferWriteOp(yyval.action, SWFACTION_POP);
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 203:
#line 950 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_MULTIPLY); ;
    break;}
case 204:
#line 955 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_DIVIDE); ;
    break;}
case 205:
#line 960 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_MODULO); ;
    break;}
case 206:
#line 965 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_NEWADD); ;
    break;}
case 207:
#line 970 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_SUBTRACT); ;
    break;}
case 208:
#line 975 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_BITWISEAND); ;
    break;}
case 209:
#line 980 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_BITWISEOR); ;
    break;}
case 210:
#line 985 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_BITWISEXOR); ;
    break;}
case 211:
#line 990 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_NEWLESSTHAN); ;
    break;}
case 212:
#line 995 "swf5compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteOp(yyval.action, SWFACTION_NEWLESSTHAN); ;
    break;}
case 213:
#line 1000 "swf5compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteOp(yyval.action, SWFACTION_NEWLESSTHAN);
		  bufferWriteOp(yyval.action, SWFACTION_LOGICALNOT); ;
    break;}
case 214:
#line 1006 "swf5compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_NEWLESSTHAN);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_LOGICALNOT); ;
    break;}
case 215:
#line 1011 "swf5compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_NEWEQUALS); ;
    break;}
case 216:
#line 1015 "swf5compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_NEWEQUALS);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_LOGICALNOT); ;
    break;}
case 217:
#line 1020 "swf5compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_SHIFTLEFT); ;
    break;}
case 218:
#line 1024 "swf5compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_SHIFTRIGHT); ;
    break;}
case 219:
#line 1028 "swf5compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteOp(yyvsp[-2].action, SWFACTION_SHIFTRIGHT2); ;
    break;}
case 220:
#line 1032 "swf5compiler.y"
{ bufferWriteOp(yyvsp[-4].action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyvsp[-4].action, 2);
		  bufferWriteS16(yyvsp[-4].action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyvsp[-4].action, yyvsp[0].action);
		  bufferWriteOp(yyvsp[-4].action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyvsp[-4].action, 2);
		  bufferWriteS16(yyvsp[-4].action, bufferLength(yyvsp[-2].action));
		  bufferConcat(yyvsp[-4].action, yyvsp[-2].action); ;
    break;}
case 221:
#line 1042 "swf5compiler.y"
{ if (yyvsp[-2].lval.obj) /* obj[memexpr] or obj.ident */
		  {
		    yyval.action = yyvsp[-2].lval.obj;

		    if (yyvsp[-2].lval.ident)
		      bufferConcat(yyval.action, yyvsp[-2].lval.ident);
		    else
		      bufferConcat(yyval.action, yyvsp[-2].lval.memexpr);

		    bufferConcat(yyval.action, yyvsp[0].action);
		    bufferWriteSetRegister(yyval.action, 0);
		    bufferWriteOp(yyval.action, SWFACTION_SETMEMBER);
		    bufferWriteRegister(yyval.action, 0);
		  }
		  else /* just ident */
		  {
		    yyval.action = yyvsp[0].action;
		    bufferWriteOp(yyval.action, SWFACTION_DUP);
		    bufferConcat(yyval.action, yyvsp[-2].lval.ident);
		    bufferWriteOp(yyval.action, SWFACTION_SWAP);
		    bufferWriteOp(yyval.action, SWFACTION_SETVARIABLE);
		  }
/* tricky case missing here: lvalue ASSIGN expr */
/* like in x = y += z; */
		;
    break;}
case 223:
#line 1073 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteInt(yyval.action, 0);
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  bufferWriteOp(yyval.action, SWFACTION_NEW); ;
    break;}
case 224:
#line 1079 "swf5compiler.y"
{ yyval.action = yyvsp[-1].exprlist.buffer;
		  bufferWriteInt(yyval.action, yyvsp[-1].exprlist.count);
		  bufferWriteString(yyval.action, yyvsp[-3].str, strlen(yyvsp[-3].str)+1);
		  bufferWriteOp(yyval.action, SWFACTION_NEW); ;
    break;}
case 225:
#line 1085 "swf5compiler.y"
{ yyval.action = yyvsp[-1].exprlist.buffer;
		  bufferWriteInt(yyval.action, yyvsp[-1].exprlist.count);
		  bufferWriteOp(yyval.action, SWFACTION_INITARRAY); ;
    break;}
case 226:
#line 1090 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteInt(yyval.action, 0);
		  bufferWriteOp(yyval.action, SWFACTION_INITOBJECT); ;
    break;}
case 227:
#line 1095 "swf5compiler.y"
{ yyval.action = yyvsp[-1].exprlist.buffer;
		  bufferWriteInt(yyval.action, yyvsp[-1].exprlist.count);
		  bufferWriteOp(yyval.action, SWFACTION_INITOBJECT); ;
    break;}
case 232:
#line 1111 "swf5compiler.y"
{ if (yyvsp[0].lval.obj)
		  {
		    if (yyvsp[0].lval.ident)	// expr . identifier
		    {
		      yyval.action = yyvsp[0].lval.obj;
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, a */
		      bufferWriteBuffer(yyval.action, yyvsp[0].lval.ident);        /* a, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a */
		      bufferConcat(yyval.action, yyvsp[0].lval.ident);             /* a, i, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER);
		      bufferWriteOp(yyval.action, yyvsp[-1].op);
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a.i = a.i+1 */
		      bufferWriteRegister(yyval.action, 0);	      /* a.i+1 */
		    }
		    else	// expr [ expr ]
		    {
		      yyval.action = yyvsp[0].lval.memexpr;			      /* i */
		      bufferConcat(yyval.action, yyvsp[0].lval.obj);		      /* i, a */
		      bufferWriteSetRegister(yyval.action, 0);	/* ($2.memexpr can use reg0) */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, i, i */
		      bufferWriteRegister(yyval.action, 0);	      /* a, i, i, a */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, i, a[i] */
		      bufferWriteOp(yyval.action, yyvsp[-1].op);		      /* a, i, a[i]+1 */
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a[i] = a[i]+1 */
		      bufferWriteRegister(yyval.action, 0);	      /* a[i]+1 */
		    }
		  }
		  else	// identifier
		  {
		    yyval.action = newBuffer();
		    bufferWriteBuffer(yyval.action, yyvsp[0].lval.ident);
		    bufferWriteOp(yyval.action, SWFACTION_GETVARIABLE);
		    bufferWriteOp(yyval.action, yyvsp[-1].op);
		    bufferWriteOp(yyval.action, SWFACTION_DUP);
		    bufferConcat(yyval.action, yyvsp[0].lval.ident);
		    bufferWriteOp(yyval.action, SWFACTION_SWAP);
		    bufferWriteOp(yyval.action, SWFACTION_SETVARIABLE);
		  }
		;
    break;}
case 233:
#line 1156 "swf5compiler.y"
{ if (yyvsp[-1].lval.obj)
		  {
		    if (yyvsp[-1].lval.ident)
		    {
		      yyval.action = yyvsp[-1].lval.obj;	                      /* a */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, a */
		      bufferWriteBuffer(yyval.action, yyvsp[-1].lval.ident);        /* a, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, a.i */
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a.i, a */
		      bufferConcat(yyval.action, yyvsp[-1].lval.ident);             /* a.i, a, i */
		      bufferWriteRegister(yyval.action, 0);             /* a.i, a, i, a.i */
		      bufferWriteOp(yyval.action, yyvsp[0].op);		      /* a.i, a, i, a.i+1 */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER);
		    }
		    else
		    {
		      yyval.action = yyvsp[-1].lval.memexpr;
		      bufferConcat(yyval.action, yyvsp[-1].lval.obj);               /* i, a */
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, i, i */
		      bufferWriteRegister(yyval.action, 0);             /* a, i, i, a */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, i, a[i] */
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, yyvsp[0].op);		      /* a, i, a[i]+1 */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER);
		      bufferWriteRegister(yyval.action, 0);             /* a[i] */
		    }
		  }
		  else
		  {
		    yyval.action = newBuffer();
		    bufferWriteBuffer(yyval.action, yyvsp[-1].lval.ident);
		    bufferWriteOp(yyval.action, SWFACTION_GETVARIABLE);
		    bufferWriteOp(yyval.action, SWFACTION_DUP);
		    bufferWriteOp(yyval.action, yyvsp[0].op);
		    bufferConcat(yyval.action, yyvsp[-1].lval.ident);
		    bufferWriteOp(yyval.action, SWFACTION_SWAP);
		    bufferWriteOp(yyval.action, SWFACTION_SETVARIABLE);
		  }
		;
    break;}
case 234:
#line 1201 "swf5compiler.y"
{ yyval.action = yyvsp[-1].action; ;
    break;}
case 235:
#line 1204 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteInt(yyval.action, -yyvsp[0].intVal); ;
    break;}
case 236:
#line 1208 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteInt(yyval.action, yyvsp[0].intVal); ;
    break;}
case 237:
#line 1212 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteDouble(yyval.action, -yyvsp[0].doubleVal); ;
    break;}
case 238:
#line 1216 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteDouble(yyval.action, yyvsp[0].doubleVal); ;
    break;}
case 239:
#line 1220 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteBoolean(yyval.action, yyvsp[0].intVal); ;
    break;}
case 240:
#line 1224 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteNull(yyval.action); ;
    break;}
case 241:
#line 1228 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 243:
#line 1237 "swf5compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 244:
#line 1243 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteOp(yyval.action, SWFACTION_VAREQUALS); ;
    break;}
case 245:
#line 1249 "swf5compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  bufferWriteOp(yyval.action, SWFACTION_VAR); ;
    break;}
case 246:
#line 1256 "swf5compiler.y"
{ asmBuffer = newBuffer(); ;
    break;}
case 247:
#line 1258 "swf5compiler.y"
{ yyval.action = asmBuffer; ;
    break;}
case 248:
#line 1261 "swf5compiler.y"
{ yyval.action = yyvsp[0].action; ;
    break;}
case 250:
#line 1266 "swf5compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteOp(yyval.action, SWFACTION_POP); ;
    break;}
case 251:
#line 1270 "swf5compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteOp(yyval.action, SWFACTION_POP); ;
    break;}
case 252:
#line 1274 "swf5compiler.y"
{ if (yyvsp[0].lval.obj)
		  {
		    if (yyvsp[0].lval.ident)
		    {
		      yyval.action = yyvsp[0].lval.obj;		              /* a */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, a */
		      bufferWriteBuffer(yyval.action, yyvsp[0].lval.ident);	      /* a, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, a.i */
		      bufferWriteOp(yyval.action, yyvsp[-1].op);		      /* a, a.i+1 */
		      bufferConcat(yyval.action, yyvsp[0].lval.ident);	      /* a, a.i+1, i */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a.i+1 */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a.i = a.i+1 */
		    }
		    else
		    {
		      /* weird contortions so that $2.memexpr can use reg 0 */
		      yyval.action = yyvsp[0].lval.memexpr;			      /* i */
		      bufferConcat(yyval.action, yyvsp[0].lval.obj);		      /* i, a */
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, i, i */
		      bufferWriteRegister(yyval.action, 0);	      /* a, i, i, a */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, i, a[i] */
		      bufferWriteOp(yyval.action, yyvsp[-1].op);		      /* a, i, a[i]+1 */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a[i] = a[i]+1 */
		    }
		  }
		  else
		  {
		    yyval.action = yyvsp[0].lval.ident;
		    bufferWriteOp(yyval.action, SWFACTION_DUP);
		    bufferWriteOp(yyval.action, SWFACTION_GETVARIABLE);
		    bufferWriteOp(yyval.action, yyvsp[-1].op);
		    bufferWriteOp(yyval.action, SWFACTION_SETVARIABLE);
		  }
		;
    break;}
case 253:
#line 1313 "swf5compiler.y"
{ if (yyvsp[-1].lval.obj)
		  {
		    if (yyvsp[-1].lval.ident)
		    {
		      yyval.action = yyvsp[-1].lval.obj;			      /* a */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);       /* a, a */
		      bufferWriteBuffer(yyval.action, yyvsp[-1].lval.ident);	      /* a, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, a.i */
		      bufferWriteOp(yyval.action, yyvsp[0].op);                  /* a, a.i+1 */
		      bufferConcat(yyval.action, yyvsp[-1].lval.ident);             /* a, a.i+1, i */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a.i+1 */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a.i = a.i+1 */
		    }
		    else
		    {
		      /* weird contortions so that $1.memexpr can use reg 0 */
		      yyval.action = yyvsp[-1].lval.memexpr;	/* i */
		      bufferConcat(yyval.action, yyvsp[-1].lval.obj);		      /* i, a */
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);       /* a, i, i */
		      bufferWriteRegister(yyval.action, 0);             /* a, i, i, a */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, i, a[i] */
		      bufferWriteOp(yyval.action, yyvsp[0].op);                  /* a, i, a[i]+1 */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a[i] = a[i]+1 */
		    }
		  }
		  else
		  {
		    yyval.action = yyvsp[-1].lval.ident;
		    bufferWriteOp(yyval.action, SWFACTION_DUP);
		    bufferWriteOp(yyval.action, SWFACTION_GETVARIABLE);
		    bufferWriteOp(yyval.action, yyvsp[0].op);
		    bufferWriteOp(yyval.action, SWFACTION_SETVARIABLE);
		  }
		;
    break;}
case 254:
#line 1352 "swf5compiler.y"
{ if (yyvsp[-2].lval.obj)
		  {
		    yyval.action = yyvsp[-2].lval.obj;

		    if (yyvsp[-2].lval.ident)
		      bufferConcat(yyval.action, yyvsp[-2].lval.ident);
		    else
		      bufferConcat(yyval.action, yyvsp[-2].lval.memexpr);

		    bufferConcat(yyval.action, yyvsp[0].action);
		    bufferWriteOp(yyval.action, SWFACTION_SETMEMBER);
		  }
		  else
		  {
		    yyval.action = yyvsp[-2].lval.ident;
		    bufferConcat(yyval.action, yyvsp[0].action);
		    bufferWriteOp(yyval.action, SWFACTION_SETVARIABLE);
		  }
		;
    break;}
case 255:
#line 1373 "swf5compiler.y"
{ if (yyvsp[-2].lval.obj)
		  {
		    if (yyvsp[-2].lval.ident)
		    {
		      yyval.action = yyvsp[-2].lval.obj;			      /* a */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, a */
		      bufferWriteBuffer(yyval.action, yyvsp[-2].lval.ident);	      /* a, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, a.i */
		      bufferConcat(yyval.action, yyvsp[0].action);		      /* a, a.i, v */
		      bufferWriteOp(yyval.action, yyvsp[-1].op);		      /* a, a.i+v */
		      bufferConcat(yyval.action, yyvsp[-2].lval.ident);	      /* a, a.i+v, i */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a.i+v */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a.i = a.i+v */
		    }
		    else
		    {
		      yyval.action = yyvsp[-2].lval.memexpr;			      /* i */
		      bufferConcat(yyval.action, yyvsp[-2].lval.obj);		      /* i, a */
		      bufferWriteSetRegister(yyval.action, 0);
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i */
		      bufferWriteOp(yyval.action, SWFACTION_DUP);	      /* a, i, i */
		      bufferWriteRegister(yyval.action, 0);	      /* a, i, i, a */
		      bufferWriteOp(yyval.action, SWFACTION_SWAP);      /* a, i, a, i */
		      bufferWriteOp(yyval.action, SWFACTION_GETMEMBER); /* a, i, a[i] */
		      bufferConcat(yyval.action, yyvsp[0].action);		      /* a, i, a[i], v */
		      bufferWriteOp(yyval.action, yyvsp[-1].op);		      /* a, i, a[i]+v */
		      bufferWriteOp(yyval.action, SWFACTION_SETMEMBER); /* a[i] = a[i]+v */
		    }
		  }
		  else
		  {
		    yyval.action = yyvsp[-2].lval.ident;
		    bufferWriteOp(yyval.action, SWFACTION_DUP);
		    bufferWriteOp(yyval.action, SWFACTION_GETVARIABLE);
		    bufferConcat(yyval.action, yyvsp[0].action);
		    bufferWriteOp(yyval.action, yyvsp[-1].op);
		    bufferWriteOp(yyval.action, SWFACTION_SETVARIABLE);
		  }
		;
    break;}
case 257:
#line 1418 "swf5compiler.y"
{ yyval.len = yyvsp[-1].len + yyvsp[0].len; ;
    break;}
case 258:
#line 1423 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_WITH); ;
    break;}
case 259:
#line 1425 "swf5compiler.y"
{ yyval.len = yyvsp[-2].len + yyvsp[-1].len;
				  bufferPatchLength(asmBuffer, yyvsp[-1].len); ;
    break;}
case 260:
#line 1430 "swf5compiler.y"
{ yyval.len = bufferWriteConstantString(asmBuffer, yyvsp[0].str,
								 strlen(yyvsp[0].str)+1); ;
    break;}
case 261:
#line 1433 "swf5compiler.y"
{ bufferWriteU8(asmBuffer, PUSH_INT);
				  yyval.len = bufferWriteInt(asmBuffer, yyvsp[0].intVal)+1; ;
    break;}
case 262:
#line 1436 "swf5compiler.y"
{ bufferWriteU8(asmBuffer, PUSH_DOUBLE);
				  yyval.len = bufferWriteDouble(asmBuffer, yyvsp[0].doubleVal)+1; ;
    break;}
case 263:
#line 1439 "swf5compiler.y"
{ bufferWriteU8(asmBuffer, PUSH_BOOLEAN);
				  yyval.len = bufferWriteU8(asmBuffer, yyvsp[0].intVal)+1; ;
    break;}
case 264:
#line 1442 "swf5compiler.y"
{ yyval.len = bufferWriteU8(asmBuffer, PUSH_NULL); ;
    break;}
case 265:
#line 1444 "swf5compiler.y"
{ bufferWriteU8(asmBuffer, PUSH_REGISTER);
				  yyval.len = bufferWriteU8(asmBuffer,
						     (char)atoi(yyvsp[0].str))+1; ;
    break;}
case 266:
#line 1451 "swf5compiler.y"
{ yyval.len = yyvsp[0].len; ;
    break;}
case 267:
#line 1452 "swf5compiler.y"
{ yyval.len += yyvsp[0].len; ;
    break;}
case 268:
#line 1456 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_PUSHDATA);
				  yyval.len += bufferWriteS16(asmBuffer, 0); ;
    break;}
case 269:
#line 1459 "swf5compiler.y"
{ yyval.len = yyvsp[-1].len + yyvsp[0].len;
				  bufferPatchLength(asmBuffer, yyvsp[0].len); ;
    break;}
case 271:
#line 1465 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_SETREGISTER);
				  yyval.len += bufferWriteS16(asmBuffer, 1);
				  yyval.len += bufferWriteU8(asmBuffer,
						      (char)atoi(yyvsp[0].str)); ;
    break;}
case 272:
#line 1471 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_CALLFUNCTION); ;
    break;}
case 273:
#line 1473 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_RETURN); ;
    break;}
case 274:
#line 1475 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_CALLMETHOD); ;
    break;}
case 275:
#line 1477 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_BITWISEAND); ;
    break;}
case 276:
#line 1479 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_BITWISEOR); ;
    break;}
case 277:
#line 1481 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_BITWISEXOR); ;
    break;}
case 278:
#line 1483 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_MODULO); ;
    break;}
case 279:
#line 1485 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_NEWADD); ;
    break;}
case 280:
#line 1487 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_NEWLESSTHAN); ;
    break;}
case 281:
#line 1489 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_NEWEQUALS); ;
    break;}
case 282:
#line 1491 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_INCREMENT); ;
    break;}
case 283:
#line 1493 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_DECREMENT); ;
    break;}
case 284:
#line 1495 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_TYPEOF); ;
    break;}
case 285:
#line 1497 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_ENUMERATE); ;
    break;}
case 286:
#line 1499 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_DELETE); ;
    break;}
case 287:
#line 1501 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_NEW); ;
    break;}
case 288:
#line 1503 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_INITARRAY); ;
    break;}
case 289:
#line 1505 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_INITOBJECT); ;
    break;}
case 290:
#line 1507 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_GETMEMBER); ;
    break;}
case 291:
#line 1509 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_SETMEMBER); ;
    break;}
case 292:
#line 1511 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_SHIFTLEFT); ;
    break;}
case 293:
#line 1513 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_SHIFTRIGHT); ;
    break;}
case 294:
#line 1515 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_SHIFTRIGHT2); ;
    break;}
case 295:
#line 1517 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_VAR); ;
    break;}
case 296:
#line 1519 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer,
						     SWFACTION_VAREQUALS); ;
    break;}
case 297:
#line 1523 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_ADD); ;
    break;}
case 298:
#line 1524 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_SUBTRACT); ;
    break;}
case 299:
#line 1525 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_MULTIPLY); ;
    break;}
case 300:
#line 1526 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_DIVIDE); ;
    break;}
case 301:
#line 1527 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_EQUAL); ;
    break;}
case 302:
#line 1528 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_LESSTHAN); ;
    break;}
case 303:
#line 1529 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_LOGICALAND); ;
    break;}
case 304:
#line 1530 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_LOGICALOR); ;
    break;}
case 305:
#line 1531 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_LOGICALNOT); ;
    break;}
case 306:
#line 1532 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_STRINGEQ); ;
    break;}
case 307:
#line 1533 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_STRINGLENGTH); ;
    break;}
case 308:
#line 1534 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_SUBSTRING); ;
    break;}
case 309:
#line 1535 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_INT); ;
    break;}
case 310:
#line 1536 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_DUP); ;
    break;}
case 311:
#line 1537 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_SWAP); ;
    break;}
case 312:
#line 1538 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_POP); ;
    break;}
case 313:
#line 1539 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_GETVARIABLE); ;
    break;}
case 314:
#line 1540 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_SETVARIABLE); ;
    break;}
case 315:
#line 1541 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_SETTARGETEXPRESSION); ;
    break;}
case 316:
#line 1542 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_STRINGCONCAT); ;
    break;}
case 317:
#line 1543 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_DUPLICATECLIP); ;
    break;}
case 318:
#line 1544 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_REMOVECLIP); ;
    break;}
case 319:
#line 1545 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_TRACE); ;
    break;}
case 320:
#line 1546 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_STRINGCOMPARE); ;
    break;}
case 321:
#line 1547 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_RANDOM); ;
    break;}
case 322:
#line 1548 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_MBLENGTH); ;
    break;}
case 323:
#line 1549 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_ORD); ;
    break;}
case 324:
#line 1550 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_CHR); ;
    break;}
case 325:
#line 1551 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_GETTIMER); ;
    break;}
case 326:
#line 1552 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_MBSUBSTRING); ;
    break;}
case 327:
#line 1553 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_MBORD); ;
    break;}
case 328:
#line 1554 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_MBCHR); ;
    break;}
case 329:
#line 1557 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_BRANCHALWAYS);
				  yyval.len += bufferWriteS16(asmBuffer, 2);
				  yyval.len += bufferBranchTarget(asmBuffer, yyvsp[0].str); ;
    break;}
case 330:
#line 1561 "swf5compiler.y"
{ yyval.len = bufferWriteOp(asmBuffer, SWFACTION_BRANCHIFTRUE);
				  yyval.len += bufferWriteS16(asmBuffer, 2);
				  yyval.len += bufferBranchTarget(asmBuffer, yyvsp[0].str); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1566 "swf5compiler.y"

