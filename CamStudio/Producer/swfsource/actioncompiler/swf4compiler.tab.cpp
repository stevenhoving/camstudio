
/*  A Bison parser, made from swf4compiler.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse swf4parse
#define yylex swf4lex
#define yyerror swf4error
#define yylval swf4lval
#define yychar swf4char
#define yydebug swf4debug
#define yynerrs swf4nerrs
#define	BREAK	257
#define	FOR	258
#define	CONTINUE	259
#define	IF	260
#define	ELSE	261
#define	DO	262
#define	WHILE	263
#define	THIS	264
#define	EVAL	265
#define	TIME	266
#define	RANDOM	267
#define	LENGTH	268
#define	INT	269
#define	CONCAT	270
#define	DUPLICATECLIP	271
#define	REMOVECLIP	272
#define	TRACE	273
#define	STARTDRAG	274
#define	STOPDRAG	275
#define	ORD	276
#define	CHR	277
#define	CALLFRAME	278
#define	GETURL	279
#define	GETURL1	280
#define	LOADMOVIE	281
#define	LOADVARIABLES	282
#define	POSTURL	283
#define	SUBSTR	284
#define	GETPROPERTY	285
#define	NEXTFRAME	286
#define	PREVFRAME	287
#define	PLAY	288
#define	STOP	289
#define	TOGGLEQUALITY	290
#define	STOPSOUNDS	291
#define	GOTOFRAME	292
#define	GOTOANDPLAY	293
#define	FRAMELOADED	294
#define	SETTARGET	295
#define	TELLTARGET	296
#define	STRING	297
#define	NUMBER	298
#define	IDENTIFIER	299
#define	PATH	300
#define	GETURL_METHOD	301
#define	EQ	302
#define	LE	303
#define	GE	304
#define	NE	305
#define	LAN	306
#define	LOR	307
#define	INC	308
#define	DEC	309
#define	IEQ	310
#define	DEQ	311
#define	MEQ	312
#define	SEQ	313
#define	STREQ	314
#define	STRNE	315
#define	STRCMP	316
#define	PARENT	317
#define	END	318
#define	UMINUS	319
#define	POSTFIX	320
#define	NEGATE	321

#line 3 "swf4compiler.y"

#include <time.h>
#include <string.h>
#include "compile.h"

#define YYPARSE_PARAM buffer

#line 13 "swf4compiler.y"
typedef union {
  Buffer action;
  char *str;
  SWFActionFunction function;
  SWFGetUrl2Method getURLMethod;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif

#define	YYFINAL		369
#define	YYFLAG		-32768
#define	YYNTBASE	86

#define YYTRANSLATE(x) ((unsigned)(x) <= 321 ? yytranslate[x] : 107)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    77,     2,     2,     2,     2,    71,     2,    83,
    84,    74,    72,    65,    73,    85,    75,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    68,    82,    69,
    66,    70,    67,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    80,     2,    81,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    76,    78,
    79
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     7,     9,    12,    16,    18,    21,    23,
    25,    27,    29,    31,    35,    36,    38,    41,    52,    61,
    71,    82,    91,   101,   109,   115,   116,   118,   128,   134,
   141,   151,   152,   154,   157,   160,   164,   169,   174,   179,
   184,   191,   200,   207,   214,   223,   230,   239,   246,   261,
   270,   274,   278,   282,   286,   290,   294,   299,   304,   309,
   314,   319,   324,   330,   336,   341,   345,   350,   355,   360,
   365,   370,   377,   386,   393,   396,   399,   401,   405,   407,
   410,   412,   414,   416,   420,   425,   428,   433,   436,   439,
   442,   446,   450,   454,   458,   462,   466,   470,   474,   478,
   482,   486,   490,   494,   498,   502,   506,   510,   516,   518,
   522,   524,   526,   528,   530,   532,   534,   536,   538,   542,
   544,   546,   549,   552,   557,   562,   566,   570,   574,   578,
   582,   588,   594,   600,   606,   612
};

static const short yyrhs[] = {    87,
     0,    88,     0,    87,    88,     0,    89,     0,    80,    81,
     0,    80,    91,    81,     0,    82,     0,   105,    82,     0,
    92,     0,    94,     0,    96,     0,    97,     0,   105,     0,
    90,    65,   105,     0,     0,    89,     0,    91,    89,     0,
     6,    83,    40,    83,    44,    84,    84,    89,     7,    89,
     0,     6,    83,    40,    83,    44,    84,    84,    89,     0,
     6,    83,    77,    40,    83,    44,    84,    84,    89,     0,
     6,    83,    40,    83,   106,    84,    84,    89,     7,    89,
     0,     6,    83,    40,    83,   106,    84,    84,    89,     0,
     6,    83,    77,    40,    83,   106,    84,    84,    89,     0,
     6,    83,   106,    84,    89,     7,    89,     0,     6,    83,
   106,    84,    89,     0,     0,   106,     0,     9,    83,    77,
    40,    83,    44,    84,    84,    89,     0,     9,    83,   106,
    84,    89,     0,     8,    89,     9,    83,   106,    84,     0,
     4,    83,    95,    82,    93,    82,    95,    84,    89,     0,
     0,    90,     0,     5,    82,     0,     3,    82,     0,    21,
    83,    84,     0,    24,    83,   102,    84,     0,    24,    83,
    43,    84,     0,    18,    83,   106,    84,     0,    19,    83,
   106,    84,     0,    25,    83,   106,    65,   106,    84,     0,
    25,    83,   106,    65,   106,    65,    47,    84,     0,    26,
    83,    43,    65,    43,    84,     0,    27,    83,   106,    65,
   106,    84,     0,    27,    83,   106,    65,   106,    65,    47,
    84,     0,    28,    83,   106,    65,   106,    84,     0,    28,
    83,   106,    65,   106,    65,    47,    84,     0,    20,    83,
   106,    65,   106,    84,     0,    20,    83,   106,    65,   106,
    65,   106,    65,   106,    65,   106,    65,   106,    84,     0,
    17,    83,   106,    65,   106,    65,   106,    84,     0,    32,
    83,    84,     0,    33,    83,    84,     0,    34,    83,    84,
     0,    35,    83,    84,     0,    36,    83,    84,     0,    37,
    83,    84,     0,    38,    83,    44,    84,     0,    38,    83,
    43,    84,     0,    38,    83,   106,    84,     0,    39,    83,
   106,    84,     0,    41,    83,    43,    84,     0,    41,    83,
   106,    84,     0,    42,    83,    43,    84,    89,     0,    42,
    83,   106,    84,    89,     0,    11,    83,   106,    84,     0,
    12,    83,    84,     0,    13,    83,   106,    84,     0,    14,
    83,   106,    84,     0,    15,    83,   106,    84,     0,    22,
    83,   106,    84,     0,    23,    83,   106,    84,     0,    16,
    83,   106,    65,   106,    84,     0,    30,    83,   106,    65,
   106,    65,   106,    84,     0,    31,    83,   106,    65,    43,
    84,     0,   104,    54,     0,   104,    55,     0,    99,     0,
    83,   101,    84,     0,    44,     0,    73,    44,     0,    43,
     0,   102,     0,   103,     0,   103,    85,    45,     0,    54,
   103,    85,    45,     0,    54,   104,     0,    55,   103,    85,
    45,     0,    55,   104,     0,    73,   101,     0,    77,   101,
     0,   104,    66,   101,     0,   101,    74,   101,     0,   101,
    75,   101,     0,   101,    72,   101,     0,   101,    73,   101,
     0,   101,    71,   101,     0,   101,    69,   101,     0,   101,
    70,   101,     0,   101,    49,   101,     0,   101,    50,   101,
     0,   101,    61,   101,     0,   101,    60,   101,     0,   101,
    62,   101,     0,   101,    48,   101,     0,   101,    51,   101,
     0,   101,    52,   101,     0,   101,    53,   101,     0,   101,
    67,   101,    68,   101,     0,    45,     0,   103,    68,    45,
     0,    10,     0,    85,     0,    75,     0,    63,     0,    45,
     0,    46,     0,   102,     0,    43,     0,    83,   101,    84,
     0,   100,     0,    98,     0,    54,   104,     0,    55,   104,
     0,    54,   103,    85,    45,     0,    55,   103,    85,    45,
     0,   104,    66,   101,     0,   104,    58,   101,     0,   104,
    57,   101,     0,   104,    56,   101,     0,   104,    59,   101,
     0,   103,    85,    45,    66,   101,     0,   103,    85,    45,
    58,   101,     0,   103,    85,    45,    57,   101,     0,   103,
    85,    45,    56,   101,     0,   103,    85,    45,    59,   101,
     0,   101,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   141,   145,   146,   151,   155,   156,   157,   158,   159,   160,
   161,   162,   166,   167,   171,   172,   173,   180,   196,   212,
   224,   238,   252,   262,   273,   282,   283,   307,   322,   334,
   342,   364,   365,   369,   377,   385,   389,   396,   403,   407,
   412,   419,   426,   435,   442,   449,   456,   464,   471,   483,
   492,   496,   500,   504,   508,   512,   516,   523,   530,   536,
   542,   549,   553,   567,   580,   584,   588,   592,   596,   600,
   604,   608,   613,   619,   628,   639,   653,   655,   658,   663,
   669,   674,   680,   685,   693,   708,   718,   733,   743,   748,
   752,   758,   763,   768,   773,   778,   783,   788,   793,   799,
   804,   809,   813,   817,   821,   826,   830,   834,   846,   848,
   855,   858,   861,   864,   867,   870,   875,   880,   885,   889,
   891,   893,   901,   909,   922,   935,   939,   946,   953,   960,
   967,   976,   989,  1002,  1015,  1030
};
#endif

#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BREAK",
"FOR","CONTINUE","IF","ELSE","DO","WHILE","THIS","EVAL","TIME","RANDOM","LENGTH",
"INT","CONCAT","DUPLICATECLIP","REMOVECLIP","TRACE","STARTDRAG","STOPDRAG","ORD",
"CHR","CALLFRAME","GETURL","GETURL1","LOADMOVIE","LOADVARIABLES","POSTURL","SUBSTR",
"GETPROPERTY","NEXTFRAME","PREVFRAME","PLAY","STOP","TOGGLEQUALITY","STOPSOUNDS",
"GOTOFRAME","GOTOANDPLAY","FRAMELOADED","SETTARGET","TELLTARGET","STRING","NUMBER",
"IDENTIFIER","PATH","GETURL_METHOD","\"==\"","\"<=\"","\">=\"","\"!=\"","\"&&\"",
"\"||\"","\"++\"","\"--\"","\"+=\"","\"/=\"","\"*=\"","\"-=\"","\"===\"","\"!==\"",
"\"<=>\"","\"..\"","\"end\"","','","'='","'?'","':'","'<'","'>'","'&'","'+'",
"'-'","'*'","'/'","UMINUS","'!'","POSTFIX","NEGATE","'{'","'}'","';'","'('",
"')'","'.'","program","elems","elem","stmt","assign_stmts","statements","if_stmt",
"expr_opt","iter_stmt","assign_stmts_opt","cont_stmt","break_stmt","void_function_call",
"function_call","pf_expr","rhs_expr","variable","sprite","lhs_expr","assign_stmt",
"expr", NULL
};
#endif

static const short yyr1[] = {     0,
    86,    87,    87,    88,    89,    89,    89,    89,    89,    89,
    89,    89,    90,    90,    91,    91,    91,    92,    92,    92,
    92,    92,    92,    92,    92,    93,    93,    94,    94,    94,
    94,    95,    95,    96,    97,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,    98,    98,    98,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,   100,   100,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   102,   102,
   103,   103,   103,   103,   103,   103,   104,   104,   104,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   106
};

static const short yyr2[] = {     0,
     1,     1,     2,     1,     2,     3,     1,     2,     1,     1,
     1,     1,     1,     3,     0,     1,     2,    10,     8,     9,
    10,     8,     9,     7,     5,     0,     1,     9,     5,     6,
     9,     0,     1,     2,     2,     3,     4,     4,     4,     4,
     6,     8,     6,     6,     8,     6,     8,     6,    14,     8,
     3,     3,     3,     3,     3,     3,     4,     4,     4,     4,
     4,     4,     5,     5,     4,     3,     4,     4,     4,     4,
     4,     6,     8,     6,     2,     2,     1,     3,     1,     2,
     1,     1,     1,     3,     4,     2,     4,     2,     2,     2,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     5,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     2,     2,     4,     4,     3,     3,     3,     3,     3,
     5,     5,     5,     5,     5,     1
};

static const short yydefact[] = {     0,
     0,     0,     0,     0,     0,     0,   111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   118,   109,   116,
     0,     0,   114,   113,     0,     7,     0,   112,     1,     2,
     4,     9,    10,    11,    12,   121,   120,   117,     0,     0,
     0,    35,    32,    34,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   122,     0,
   123,     5,    16,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    81,    79,     0,     0,     0,     0,
     0,    77,     0,    82,    83,     0,     3,     0,     0,    75,
    76,     0,     0,     0,     0,     0,     8,    33,     0,    13,
     0,     0,   136,     0,     0,     0,     0,     0,     0,     0,
     0,    36,     0,     0,     0,     0,     0,     0,     0,    51,
    52,    53,    54,    55,    56,    81,    79,     0,     0,    81,
     0,    81,     0,     0,     0,     6,    17,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    86,     0,
    88,    79,    89,    90,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,     0,     0,   110,     0,   129,   128,   127,
   130,   126,     0,    26,     0,     0,     0,     0,     0,     0,
     0,    39,    40,     0,    38,    37,     0,     0,     0,     0,
    58,    57,    59,    60,    61,    62,     0,     0,   124,   125,
     0,    66,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    78,   104,    99,   100,   105,   106,   107,   102,
   101,   103,     0,    97,    98,    96,    94,    95,    92,    93,
    84,    91,     0,     0,     0,     0,     0,    14,     0,    27,
    79,     0,     0,    25,     0,     0,    29,     0,     0,     0,
     0,     0,     0,    63,    64,    65,    67,    68,    69,     0,
    70,    71,     0,     0,    85,    87,     0,   134,   133,   132,
   135,   131,    32,     0,     0,    79,     0,     0,    30,     0,
     0,     0,    48,     0,    41,    43,     0,    44,     0,    46,
     0,     0,     0,   108,     0,     0,     0,     0,     0,    24,
     0,     0,     0,     0,     0,     0,    72,     0,    74,     0,
    19,    22,     0,     0,     0,    50,     0,    42,    45,    47,
     0,    31,     0,     0,    20,    23,    28,     0,    73,    18,
    21,     0,     0,     0,     0,    49,     0,     0,     0
};

static const short yydefgoto[] = {   367,
    39,    40,    41,   118,    84,    42,   269,    43,   119,    44,
    45,    46,   102,    47,   123,   104,   105,   106,    51,   124
};

static const short yypact[] = {   653,
   -78,   -74,   -69,   -64,   653,   -63,-32768,   -37,   -22,   -17,
   -15,   -13,    -7,    -6,    -1,    16,    17,    19,    23,    24,
    25,    28,    29,    30,    41,    42,    46,-32768,   -23,-32768,
   178,   178,-32768,-32768,   442,-32768,   936,-32768,   653,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -18,   126,
   -34,-32768,   722,-32768,   768,    63,   962,   936,   936,   936,
   936,    47,   133,   936,    40,   936,   936,    48,    58,    65,
    68,    69,    70,  1018,   936,  1044,  1100,   -14,-32768,   -12,
-32768,-32768,-32768,   570,    89,    90,    92,    94,   103,   104,
   106,   107,   108,   110,   128,-32768,   178,   178,  1126,   936,
   936,-32768,    66,   129,   -11,   131,-32768,   153,   154,-32768,
-32768,   936,   936,   936,   936,   936,-32768,   135,   119,-32768,
   121,   824,   492,   118,   122,   880,   127,   141,   130,   136,
   147,-32768,   142,   145,   149,   160,   165,   166,   167,-32768,
-32768,-32768,-32768,-32768,-32768,   -48,   151,   152,   163,   -32,
   164,   -24,   168,   192,   193,-32768,-32768,   936,   170,   936,
   936,   936,   936,   936,   936,   936,   936,   -10,-32768,    -4,
-32768,-32768,-32768,-32768,   348,   936,   936,   936,   936,   936,
   936,   936,   936,   936,   936,   936,   936,   936,   936,   936,
   936,   936,-32768,   204,   936,-32768,    64,   492,   492,   492,
   492,   492,   722,   936,  1182,   172,   653,   936,   173,   653,
   936,-32768,-32768,   936,-32768,-32768,   936,   207,   936,   936,
-32768,-32768,-32768,-32768,-32768,-32768,   653,   653,-32768,-32768,
   174,-32768,   175,   180,   181,   197,   182,   183,   203,   205,
   224,   226,   206,   -47,    73,    73,   -47,   811,   811,   -47,
   -47,    73,   569,    73,    73,    14,   -67,   -67,-32768,-32768,
-32768,   492,   936,   936,   936,   936,   936,-32768,   191,-32768,
   190,   200,  1208,   268,   201,   243,-32768,   225,   -55,   -51,
   208,   -44,   -35,-32768,-32768,-32768,-32768,-32768,-32768,   936,
-32768,-32768,   936,   248,-32768,-32768,   936,   492,   492,   492,
   492,   492,   722,   209,   210,   211,   216,   653,-32768,   217,
   936,   936,-32768,   255,-32768,-32768,   257,-32768,   258,-32768,
   223,   241,   227,   652,   228,   653,   653,   229,   232,-32768,
   233,   234,   245,   235,   237,   238,-32768,   936,-32768,   653,
   316,   317,   653,   653,   653,-32768,   936,-32768,-32768,-32768,
   244,-32768,   653,   653,-32768,-32768,-32768,   260,-32768,-32768,
-32768,   936,   264,   936,   246,-32768,   331,   334,-32768
};

static const short yypgoto[] = {-32768,
-32768,   296,    50,-32768,-32768,-32768,-32768,-32768,    33,-32768,
-32768,-32768,-32768,-32768,   -21,     0,     6,    12,   -52,   222
};

#define	YYLAST		1293

static const short yytable[] = {    48,
   120,   177,   178,    52,    48,    49,   191,   192,    53,   312,
    49,    50,    54,   314,   184,   103,    50,  -118,    55,    57,
   317,   186,   187,   188,   189,   190,   191,   192,   313,   319,
    48,    48,   315,  -118,    48,   221,    78,    80,    48,   318,
    49,  -118,    79,    81,    49,    58,    50,   117,   320,   108,
    50,   225,    48,   108,    56,   108,   108,   108,    49,   227,
    59,  -115,   134,   108,    50,    60,   109,    61,   135,    62,
   154,   125,   155,   194,   241,    63,    64,   173,   174,   175,
   242,    65,   137,    48,    83,   189,   190,   191,   192,    49,
   198,   199,   200,   201,   202,    50,    48,    48,    66,    67,
   174,    68,   168,   170,   174,    69,    70,    71,   169,   171,
    72,    73,    74,   176,   177,   178,   179,   180,   181,   263,
   264,   265,   266,    75,    76,   182,   183,   184,    77,   267,
   132,   140,   185,   157,   186,   187,   188,   189,   190,   191,
   192,   141,     7,   188,   189,   190,   191,   192,   142,   193,
   268,   143,   144,   145,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   158,   159,   262,   160,   133,   161,    29,    30,   110,
   111,   112,   113,   114,   115,   162,   163,     7,   164,   165,
   166,   116,   167,  -118,  -117,    33,   195,   196,   197,   203,
   204,   207,    48,   205,   208,   211,    48,    34,    49,    48,
   210,   214,    49,   212,    50,    49,   108,    38,    50,   213,
    28,    50,    29,    30,   217,   215,    48,    48,   216,   218,
   219,   220,    49,    49,   222,   223,   229,   230,    50,    50,
    33,   298,   299,   300,   301,   302,   224,   226,   261,   281,
   120,   228,    34,   232,   273,   276,   274,   286,   287,   277,
    37,   290,    38,   288,   289,   291,   292,   293,   295,   294,
   296,  -119,   303,   304,   308,   324,   284,   285,   127,   128,
   129,   130,   131,   305,   309,   136,   310,   138,   139,   311,
   323,   316,   326,   327,   328,   148,   149,   151,   153,   329,
   331,   334,    48,   335,   336,   338,   337,    48,    49,   347,
   339,   340,   343,    49,    50,   344,   345,   346,   348,    50,
   349,   350,   353,   354,   362,    48,    48,   359,   364,   366,
   368,    49,    49,   369,   107,   325,     0,    50,    50,    48,
     0,     0,    48,    48,    48,    49,     0,     0,    49,    49,
    49,    50,    48,    48,    50,    50,    50,   330,    49,    49,
     0,     0,     0,     0,    50,    50,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   341,   342,     0,     0,   231,
     0,   233,   234,   235,   236,   237,   238,   239,   240,   352,
     0,     0,   355,   356,   357,   176,   177,   178,   179,   180,
   181,     0,   360,   361,     0,     0,     0,   182,   183,   184,
     0,     0,     0,     0,   185,     0,   186,   187,   188,   189,
   190,   191,   192,     0,     0,   270,   272,     0,     0,   275,
     0,   243,   278,     0,     0,   279,     0,     0,   280,     0,
   282,   283,     0,     0,     1,     2,     3,     4,     0,     5,
     6,     7,     0,     0,     0,     0,     0,     0,     8,     9,
    10,    11,    12,     0,     0,    13,    14,    15,    16,    17,
     0,     0,     0,    18,    19,    20,    21,    22,    23,    24,
    25,     0,    26,    27,    28,     0,    29,    30,     0,     0,
     0,     0,     0,     0,   307,    31,    32,     0,     0,     0,
     0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
     0,   321,     0,     0,   322,     0,    34,     0,     0,     0,
     0,    35,    82,    36,    37,     0,    38,     0,     0,     0,
     0,     0,   332,   333,     0,     0,     0,     0,     0,   176,
   177,   178,   179,   180,   181,     0,     0,     0,     0,     0,
     0,   182,   183,   184,     0,     0,     0,     0,   185,   351,
   186,   187,   188,   189,   190,   191,   192,     0,   358,     0,
     0,     0,     1,     2,     3,     4,     0,     5,     6,     7,
     0,     0,     0,   363,     0,   365,     8,     9,    10,    11,
    12,     0,     0,    13,    14,    15,    16,    17,     0,     0,
     0,    18,    19,    20,    21,    22,    23,    24,    25,     0,
    26,    27,    28,     0,    29,    30,   176,   177,   178,   179,
   180,   181,     0,    31,    32,     0,     0,     0,   182,   183,
   184,     0,    33,     0,     0,   185,   297,   186,   187,   188,
   189,   190,   191,   192,    34,     0,     0,     0,     0,    35,
   156,    36,    37,     0,    38,     1,     2,     3,     4,     0,
     5,     6,     7,     0,     0,     0,     0,     0,     0,     8,
     9,    10,    11,    12,     0,     0,    13,    14,    15,    16,
    17,     0,     0,     0,    18,    19,    20,    21,    22,    23,
    24,    25,     0,    26,    27,    28,     0,    29,    30,   176,
   177,   178,   179,   180,   181,     0,    31,    32,     0,     0,
     0,   182,   183,   184,     0,    33,     0,     0,     0,     0,
   186,   187,   188,   189,   190,   191,   192,    34,     0,     0,
     0,     7,    35,     0,    36,    37,     0,    38,     8,     9,
    10,    11,    12,     0,     0,    13,    14,    15,    16,    17,
     0,     0,     0,    18,    19,    20,    21,    22,    23,    24,
    25,     0,    26,    27,    28,     0,    29,    30,     0,     0,
     0,     0,     0,     0,     0,    31,    32,     7,    85,    86,
    87,    88,    89,    90,    33,     0,     0,     0,     0,    91,
    92,     0,     0,     0,     0,     0,    34,    93,    94,     0,
     0,     0,     0,     0,    37,     0,    38,   121,     0,     0,
    95,    96,    29,    30,     0,     0,     0,     0,     0,     0,
     0,    97,    98,     0,     0,     0,     0,     0,     0,     0,
    33,     0,     0,     7,    85,    86,    87,    88,    89,    90,
    99,     0,    34,     0,   122,    91,    92,     0,     0,     0,
   101,     0,    38,    93,    94,     0,     0,     0,   176,   177,
   178,   179,     0,   206,     0,     0,    95,    96,    29,    30,
   182,   183,   184,     0,     0,     0,     0,    97,    98,   186,
   187,   188,   189,   190,   191,   192,    33,     0,     0,     7,
    85,    86,    87,    88,    89,    90,    99,     0,    34,     0,
   100,    91,    92,     0,     0,     0,   101,     0,    38,    93,
    94,     0,     0,     0,     0,     0,     0,     0,     0,   209,
     0,     0,    95,    96,    29,    30,     0,     0,     0,     0,
     0,     0,     0,    97,    98,     0,     0,     0,     0,     0,
     0,     0,    33,     0,     0,     7,    85,    86,    87,    88,
    89,    90,    99,     0,    34,     0,   100,    91,    92,     0,
     0,     0,   101,     0,    38,    93,    94,     0,     0,     0,
     0,     7,    85,    86,    87,    88,    89,    90,    95,    96,
    29,    30,     0,    91,    92,     0,     0,     0,     0,    97,
    98,    93,    94,     0,     0,     0,     0,     0,    33,     0,
     0,     0,     0,     0,    95,    96,    29,    30,    99,     0,
    34,     0,   100,     0,     0,    97,    98,     0,   101,     0,
    38,     0,     0,     0,    33,     0,     0,     7,    85,    86,
    87,    88,    89,    90,    99,     0,    34,     0,   126,    91,
    92,     0,     0,     0,   101,     0,    38,    93,    94,     0,
     0,     0,     0,     7,    85,    86,    87,    88,    89,    90,
   146,   147,    29,    30,     0,    91,    92,     0,     0,     0,
     0,    97,    98,    93,    94,     0,     0,     0,     0,     0,
    33,     0,     0,     0,     0,     0,   150,    96,    29,    30,
    99,     0,    34,     0,   100,     0,     0,    97,    98,     0,
   101,     0,    38,     0,     0,     0,    33,     0,     0,     7,
    85,    86,    87,    88,    89,    90,    99,     0,    34,     0,
   100,    91,    92,     0,     0,     0,   101,     0,    38,    93,
    94,     0,     0,     0,     0,     7,    85,    86,    87,    88,
    89,    90,   152,    96,    29,    30,     0,    91,    92,     0,
     0,     0,     0,    97,    98,    93,    94,     0,     0,     0,
     0,     0,    33,     0,     0,     0,     0,     0,    95,   172,
    29,    30,    99,     0,    34,     0,   100,     0,     0,    97,
    98,     0,   101,     0,    38,     0,     0,     0,    33,     0,
     0,     7,    85,    86,    87,    88,    89,    90,    99,     0,
    34,     0,   100,    91,    92,     0,     0,     0,   101,     0,
    38,    93,    94,     0,     0,     0,     0,     7,    85,    86,
    87,    88,    89,    90,    95,   271,    29,    30,     0,    91,
    92,     0,     0,     0,     0,    97,    98,    93,    94,     0,
     0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
    95,   306,    29,    30,    99,     0,    34,     0,   100,     0,
     0,    97,    98,     0,   101,     0,    38,     0,     0,     0,
    33,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    99,     0,    34,     0,   100,     0,     0,     0,     0,     0,
   101,     0,    38
};

static const short yycheck[] = {     0,
    53,    49,    50,    82,     5,     0,    74,    75,    83,    65,
     5,     0,    82,    65,    62,    37,     5,    66,    83,    83,
    65,    69,    70,    71,    72,    73,    74,    75,    84,    65,
    31,    32,    84,    66,    35,    84,    31,    32,    39,    84,
    35,    66,    31,    32,    39,    83,    35,    82,    84,    68,
    39,    84,    53,    68,     5,    68,    68,    68,    53,    84,
    83,    85,    63,    68,    53,    83,    85,    83,    63,    83,
    85,     9,    85,    85,    85,    83,    83,    99,   100,   101,
    85,    83,    43,    84,    35,    72,    73,    74,    75,    84,
   112,   113,   114,   115,   116,    84,    97,    98,    83,    83,
   122,    83,    97,    98,   126,    83,    83,    83,    97,    98,
    83,    83,    83,    48,    49,    50,    51,    52,    53,    56,
    57,    58,    59,    83,    83,    60,    61,    62,    83,    66,
    84,    84,    67,    84,    69,    70,    71,    72,    73,    74,
    75,    84,    10,    71,    72,    73,    74,    75,    84,    84,
   203,    84,    84,    84,   176,   177,   178,   179,   180,   181,
   182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
   192,    83,    83,   195,    83,    43,    83,    45,    46,    54,
    55,    56,    57,    58,    59,    83,    83,    10,    83,    83,
    83,    66,    83,    66,    66,    63,    66,    45,    45,    65,
    82,    84,   203,    83,    83,    65,   207,    75,   203,   210,
    84,    65,   207,    84,   203,   210,    68,    85,   207,    84,
    43,   210,    45,    46,    65,    84,   227,   228,    84,    65,
    65,    65,   227,   228,    84,    84,    45,    45,   227,   228,
    63,   263,   264,   265,   266,   267,    84,    84,    45,    43,
   303,    84,    75,    84,    83,    83,   207,    84,    84,   210,
    83,    65,    85,    84,    84,    84,    84,    65,    45,    65,
    45,    66,    82,    84,     7,   297,   227,   228,    57,    58,
    59,    60,    61,    84,    84,    64,    44,    66,    67,    65,
    43,    84,    84,    84,    84,    74,    75,    76,    77,    84,
    84,    47,   303,    47,    47,    65,    84,   308,   303,    65,
    84,    84,    84,   308,   303,    84,    84,    84,    84,   308,
    84,    84,     7,     7,    65,   326,   327,    84,    65,    84,
     0,   326,   327,     0,    39,   303,    -1,   326,   327,   340,
    -1,    -1,   343,   344,   345,   340,    -1,    -1,   343,   344,
   345,   340,   353,   354,   343,   344,   345,   308,   353,   354,
    -1,    -1,    -1,    -1,   353,   354,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   326,   327,    -1,    -1,   158,
    -1,   160,   161,   162,   163,   164,   165,   166,   167,   340,
    -1,    -1,   343,   344,   345,    48,    49,    50,    51,    52,
    53,    -1,   353,   354,    -1,    -1,    -1,    60,    61,    62,
    -1,    -1,    -1,    -1,    67,    -1,    69,    70,    71,    72,
    73,    74,    75,    -1,    -1,   204,   205,    -1,    -1,   208,
    -1,    84,   211,    -1,    -1,   214,    -1,    -1,   217,    -1,
   219,   220,    -1,    -1,     3,     4,     5,     6,    -1,     8,
     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,    18,
    19,    20,    21,    -1,    -1,    24,    25,    26,    27,    28,
    -1,    -1,    -1,    32,    33,    34,    35,    36,    37,    38,
    39,    -1,    41,    42,    43,    -1,    45,    46,    -1,    -1,
    -1,    -1,    -1,    -1,   273,    54,    55,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    -1,   290,    -1,    -1,   293,    -1,    75,    -1,    -1,    -1,
    -1,    80,    81,    82,    83,    -1,    85,    -1,    -1,    -1,
    -1,    -1,   311,   312,    -1,    -1,    -1,    -1,    -1,    48,
    49,    50,    51,    52,    53,    -1,    -1,    -1,    -1,    -1,
    -1,    60,    61,    62,    -1,    -1,    -1,    -1,    67,   338,
    69,    70,    71,    72,    73,    74,    75,    -1,   347,    -1,
    -1,    -1,     3,     4,     5,     6,    -1,     8,     9,    10,
    -1,    -1,    -1,   362,    -1,   364,    17,    18,    19,    20,
    21,    -1,    -1,    24,    25,    26,    27,    28,    -1,    -1,
    -1,    32,    33,    34,    35,    36,    37,    38,    39,    -1,
    41,    42,    43,    -1,    45,    46,    48,    49,    50,    51,
    52,    53,    -1,    54,    55,    -1,    -1,    -1,    60,    61,
    62,    -1,    63,    -1,    -1,    67,    68,    69,    70,    71,
    72,    73,    74,    75,    75,    -1,    -1,    -1,    -1,    80,
    81,    82,    83,    -1,    85,     3,     4,     5,     6,    -1,
     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    17,
    18,    19,    20,    21,    -1,    -1,    24,    25,    26,    27,
    28,    -1,    -1,    -1,    32,    33,    34,    35,    36,    37,
    38,    39,    -1,    41,    42,    43,    -1,    45,    46,    48,
    49,    50,    51,    52,    53,    -1,    54,    55,    -1,    -1,
    -1,    60,    61,    62,    -1,    63,    -1,    -1,    -1,    -1,
    69,    70,    71,    72,    73,    74,    75,    75,    -1,    -1,
    -1,    10,    80,    -1,    82,    83,    -1,    85,    17,    18,
    19,    20,    21,    -1,    -1,    24,    25,    26,    27,    28,
    -1,    -1,    -1,    32,    33,    34,    35,    36,    37,    38,
    39,    -1,    41,    42,    43,    -1,    45,    46,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    54,    55,    10,    11,    12,
    13,    14,    15,    16,    63,    -1,    -1,    -1,    -1,    22,
    23,    -1,    -1,    -1,    -1,    -1,    75,    30,    31,    -1,
    -1,    -1,    -1,    -1,    83,    -1,    85,    40,    -1,    -1,
    43,    44,    45,    46,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    63,    -1,    -1,    10,    11,    12,    13,    14,    15,    16,
    73,    -1,    75,    -1,    77,    22,    23,    -1,    -1,    -1,
    83,    -1,    85,    30,    31,    -1,    -1,    -1,    48,    49,
    50,    51,    -1,    40,    -1,    -1,    43,    44,    45,    46,
    60,    61,    62,    -1,    -1,    -1,    -1,    54,    55,    69,
    70,    71,    72,    73,    74,    75,    63,    -1,    -1,    10,
    11,    12,    13,    14,    15,    16,    73,    -1,    75,    -1,
    77,    22,    23,    -1,    -1,    -1,    83,    -1,    85,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
    -1,    -1,    43,    44,    45,    46,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    63,    -1,    -1,    10,    11,    12,    13,    14,
    15,    16,    73,    -1,    75,    -1,    77,    22,    23,    -1,
    -1,    -1,    83,    -1,    85,    30,    31,    -1,    -1,    -1,
    -1,    10,    11,    12,    13,    14,    15,    16,    43,    44,
    45,    46,    -1,    22,    23,    -1,    -1,    -1,    -1,    54,
    55,    30,    31,    -1,    -1,    -1,    -1,    -1,    63,    -1,
    -1,    -1,    -1,    -1,    43,    44,    45,    46,    73,    -1,
    75,    -1,    77,    -1,    -1,    54,    55,    -1,    83,    -1,
    85,    -1,    -1,    -1,    63,    -1,    -1,    10,    11,    12,
    13,    14,    15,    16,    73,    -1,    75,    -1,    77,    22,
    23,    -1,    -1,    -1,    83,    -1,    85,    30,    31,    -1,
    -1,    -1,    -1,    10,    11,    12,    13,    14,    15,    16,
    43,    44,    45,    46,    -1,    22,    23,    -1,    -1,    -1,
    -1,    54,    55,    30,    31,    -1,    -1,    -1,    -1,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    43,    44,    45,    46,
    73,    -1,    75,    -1,    77,    -1,    -1,    54,    55,    -1,
    83,    -1,    85,    -1,    -1,    -1,    63,    -1,    -1,    10,
    11,    12,    13,    14,    15,    16,    73,    -1,    75,    -1,
    77,    22,    23,    -1,    -1,    -1,    83,    -1,    85,    30,
    31,    -1,    -1,    -1,    -1,    10,    11,    12,    13,    14,
    15,    16,    43,    44,    45,    46,    -1,    22,    23,    -1,
    -1,    -1,    -1,    54,    55,    30,    31,    -1,    -1,    -1,
    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,    43,    44,
    45,    46,    73,    -1,    75,    -1,    77,    -1,    -1,    54,
    55,    -1,    83,    -1,    85,    -1,    -1,    -1,    63,    -1,
    -1,    10,    11,    12,    13,    14,    15,    16,    73,    -1,
    75,    -1,    77,    22,    23,    -1,    -1,    -1,    83,    -1,
    85,    30,    31,    -1,    -1,    -1,    -1,    10,    11,    12,
    13,    14,    15,    16,    43,    44,    45,    46,    -1,    22,
    23,    -1,    -1,    -1,    -1,    54,    55,    30,    31,    -1,
    -1,    -1,    -1,    -1,    63,    -1,    -1,    -1,    -1,    -1,
    43,    44,    45,    46,    73,    -1,    75,    -1,    77,    -1,
    -1,    54,    55,    -1,    83,    -1,    85,    -1,    -1,    -1,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    73,    -1,    75,    -1,    77,    -1,    -1,    -1,    -1,    -1,
    83,    -1,    85
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in sbytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 142 "swf4compiler.y"
{ *((Buffer *)buffer) = yyvsp[0].action; ;
    break;}
case 3:
#line 147 "swf4compiler.y"
{ bufferConcat(yyvsp[-1].action, yyvsp[0].action); ;
    break;}
case 5:
#line 155 "swf4compiler.y"
{ yyval.action = NULL; ;
    break;}
case 6:
#line 156 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action; ;
    break;}
case 7:
#line 157 "swf4compiler.y"
{ yyval.action = NULL; ;
    break;}
case 14:
#line 167 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action); ;
    break;}
case 15:
#line 171 "swf4compiler.y"
{ yyval.action = NULL; ;
    break;}
case 17:
#line 174 "swf4compiler.y"
{ bufferConcat(yyvsp[-1].action, yyvsp[0].action); ;
    break;}
case 18:
#line 181 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_WAITFORFRAME);
		  bufferWriteS16(yyval.action, 3);
		  bufferWriteS16(yyval.action, atoi(yyvsp[-5].str));
		  free(yyvsp[-5].str);
		  bufferWriteU8(yyval.action, 1);		/* if not loaded, jump to.. */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyval.action, yyvsp[0].action);			  /* ..here */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[-2].action));
		  bufferConcat(yyval.action, yyvsp[-2].action); ;
    break;}
case 19:
#line 197 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_WAITFORFRAME);
		  bufferWriteS16(yyval.action, 3);
		  bufferWriteS16(yyval.action, atoi(yyvsp[-3].str));
		  free(yyvsp[-3].str);
		  bufferWriteU8(yyval.action, 1);		/* if not loaded, jump to.. */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, 5);
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);	  /* ..here */
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action));	  /* ..and then out */
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 20:
#line 213 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_WAITFORFRAME);
		  bufferWriteS16(yyval.action, 3);
		  bufferWriteS16(yyval.action, atoi(yyvsp[-3].str));
		  free(yyvsp[-3].str);
		  bufferWriteU8(yyval.action, 1);		/* if not loaded, jump to.. */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action));
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 21:
#line 225 "swf4compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferWriteU8(yyval.action, SWFACTION_WAITFORFRAMEEXPRESSION);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 1);		/* if not loaded, jump to.. */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyval.action, yyvsp[0].action);			  /* ..here */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[-2].action));
		  bufferConcat(yyval.action, yyvsp[-2].action); ;
    break;}
case 22:
#line 239 "swf4compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferWriteU8(yyval.action, SWFACTION_WAITFORFRAMEEXPRESSION);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 1);		/* if not loaded, jump to.. */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, 5);
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);	  /* ..here */
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action));	  /* ..and then out */
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 23:
#line 253 "swf4compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferWriteU8(yyval.action, SWFACTION_WAITFORFRAMEEXPRESSION);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 1);		/* if not loaded, jump to.. */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action));
		  bufferConcat(yyval.action, yyvsp[0].action); ;
    break;}
case 24:
#line 263 "swf4compiler.y"
{ bufferWriteU8(yyvsp[-4].action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyvsp[-4].action, 2);
		  bufferWriteS16(yyvsp[-4].action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyvsp[-4].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-4].action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyvsp[-4].action, 2);
		  bufferWriteS16(yyvsp[-4].action, bufferLength(yyvsp[-2].action));
		  bufferConcat(yyvsp[-4].action, yyvsp[-2].action);
		  yyval.action = yyvsp[-4].action; ;
    break;}
case 25:
#line 274 "swf4compiler.y"
{ bufferWriteU8(yyvsp[-2].action, SWFACTION_LOGICALNOT);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyvsp[-2].action, 2);
		  bufferWriteS16(yyvsp[-2].action, bufferLength(yyvsp[0].action));
		  bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  yyval.action = yyvsp[-2].action; ;
    break;}
case 26:
#line 282 "swf4compiler.y"
{ yyval.action = NULL; ;
    break;}
case 27:
#line 283 "swf4compiler.y"
{ yyval.action = yyvsp[0].action; ;
    break;}
case 28:
#line 308 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_WAITFORFRAME);
		  bufferWriteS16(yyval.action, 3);
		  bufferWriteS16(yyval.action, atoi(yyvsp[-3].str));
		  free(yyvsp[-3].str);
		  bufferWriteU8(yyval.action, 1);		/* if not loaded, jump to.. */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyval.action, yyvsp[0].action);				  /* ..here */
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, -(bufferLength(yyval.action)+2)); ;
    break;}
case 29:
#line 323 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferWriteU8(yyval.action, SWFACTION_LOGICALNOT);
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, -(bufferLength(yyval.action)+2));
		  bufferResolveJumps(yyval.action); ;
    break;}
case 30:
#line 335 "swf4compiler.y"
{ yyval.action = yyvsp[-4].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, -(bufferLength(yyval.action)+2));
		  bufferResolveJumps(yyval.action); ;
    break;}
case 31:
#line 343 "swf4compiler.y"
{ if (!yyvsp[-4].action)
                    yyvsp[-4].action = newBuffer();
                  else {
                    bufferWriteU8(yyvsp[-4].action, SWFACTION_LOGICALNOT);
                    bufferWriteU8(yyvsp[-4].action, SWFACTION_BRANCHIFTRUE);
                    bufferWriteS16(yyvsp[-4].action, 2);
                    bufferWriteS16(yyvsp[-4].action, bufferLength(yyvsp[0].action)+bufferLength(yyvsp[-2].action)+5);
                  }
                  bufferConcat(yyvsp[-4].action, yyvsp[0].action);
                  bufferConcat(yyvsp[-4].action, yyvsp[-2].action);
                  bufferWriteU8(yyvsp[-4].action, SWFACTION_BRANCHALWAYS);
                  bufferWriteS16(yyvsp[-4].action, 2);
                  bufferWriteS16(yyvsp[-4].action, -(bufferLength(yyvsp[-4].action)+2));
                  bufferResolveJumps(yyvsp[-4].action);
                  yyval.action = yyvsp[-6].action;
                  if (!yyval.action) yyval.action = newBuffer();
                  bufferConcat(yyval.action, yyvsp[-4].action);
                ;
    break;}
case 32:
#line 364 "swf4compiler.y"
{ yyval.action = NULL; ;
    break;}
case 34:
#line 370 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, MAGIC_CONTINUE_NUMBER); ;
    break;}
case 35:
#line 378 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, MAGIC_BREAK_NUMBER); ;
    break;}
case 36:
#line 386 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_STOPDRAGMOVIE); ;
    break;}
case 37:
#line 390 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str)+1);
		  bufferWriteU8(yyval.action, SWFACTION_CALLFRAME);
		  bufferWriteS16(yyval.action, 0);
		  free(yyvsp[-1].str); ;
    break;}
case 38:
#line 397 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str)+1);
		  bufferWriteU8(yyval.action, SWFACTION_CALLFRAME);
		  bufferWriteS16(yyval.action, 0);
		  free(yyvsp[-1].str); ;
    break;}
case 39:
#line 404 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_REMOVECLIP); ;
    break;}
case 40:
#line 408 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_TRACE); ;
    break;}
case 41:
#line 413 "swf4compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, GETURL_METHOD_NOSEND); ;
    break;}
case 42:
#line 420 "swf4compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, yyvsp[-1].getURLMethod); ;
    break;}
case 43:
#line 427 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_GETURL);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-3].str) + strlen(yyvsp[-1].str) + 2);
		  bufferWriteHardString(yyval.action, yyvsp[-3].str, strlen(yyvsp[-3].str));
		  bufferWriteU8(yyval.action, 0);
		  bufferWriteHardString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str));
		  bufferWriteU8(yyval.action, 0); ;
    break;}
case 44:
#line 436 "swf4compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, GETURL_METHOD_NOSEND | GETURL_LOADMOVIE); ;
    break;}
case 45:
#line 443 "swf4compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, yyvsp[-1].getURLMethod | GETURL_LOADMOVIE); ;
    break;}
case 46:
#line 450 "swf4compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, GETURL_METHOD_NOSEND | GETURL_LOADVARIABLES); ;
    break;}
case 47:
#line 457 "swf4compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETURL2);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, yyvsp[-1].getURLMethod | GETURL_LOADVARIABLES); ;
    break;}
case 48:
#line 465 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, "0", 2); /* no constraint */
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferWriteU8(yyval.action, SWFACTION_STARTDRAGMOVIE); ;
    break;}
case 49:
#line 472 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferConcat(yyval.action, yyvsp[-7].action);
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferConcat(yyval.action, yyvsp[-5].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteString(yyval.action, "1", 2); /* has constraint */
		  bufferConcat(yyval.action, yyvsp[-9].action);
		  bufferConcat(yyval.action, yyvsp[-11].action);
		  bufferWriteU8(yyval.action, SWFACTION_STARTDRAGMOVIE); ;
    break;}
case 50:
#line 484 "swf4compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteWTHITProperty(yyval.action);
		  bufferWriteU8(yyval.action, SWFACTION_ADD); /* see docs for explanation */
		  bufferWriteU8(yyval.action, SWFACTION_DUPLICATECLIP); ;
    break;}
case 51:
#line 493 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_NEXTFRAME); ;
    break;}
case 52:
#line 497 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_PREVFRAME); ;
    break;}
case 53:
#line 501 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_PLAY); ;
    break;}
case 54:
#line 505 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_STOP); ;
    break;}
case 55:
#line 509 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_TOGGLEQUALITY); ;
    break;}
case 56:
#line 513 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_STOPSOUNDS); ;
    break;}
case 57:
#line 517 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_GOTOFRAME);
		  bufferWriteS16(yyval.action, 2);
		  bufferWriteS16(yyval.action, atoi(yyvsp[-1].str));
		  free(yyvsp[-1].str); ;
    break;}
case 58:
#line 524 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_GOTOLABEL);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-1].str)+1);
		  bufferWriteHardString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str)+1);
		  free(yyvsp[-1].str); ;
    break;}
case 59:
#line 531 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_GOTOEXPRESSION);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 0); ;
    break;}
case 60:
#line 537 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_GOTOEXPRESSION);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 1); ;
    break;}
case 61:
#line 543 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_SETTARGET);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-1].str)+1);
		  bufferWriteHardString(yyval.action, yyvsp[-1].str, strlen(yyvsp[-1].str)+1);
		  free(yyvsp[-1].str); ;
    break;}
case 62:
#line 550 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_SETTARGETEXPRESSION); ;
    break;}
case 63:
#line 554 "swf4compiler.y"
{ yyval.action = newBuffer();
			/* SetTarget(STRING) */
		  bufferWriteU8(yyval.action, SWFACTION_SETTARGET);
		  bufferWriteS16(yyval.action, strlen(yyvsp[-2].str)+1);
		  bufferWriteHardString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
			/* stmt */
		  bufferConcat(yyval.action, yyvsp[0].action);
			/* SetTarget('') */
		  bufferWriteU8(yyval.action, SWFACTION_SETTARGET);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 0);
		  free(yyvsp[-2].str); ;
    break;}
case 64:
#line 568 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
			/* SetTarget(expr) */
		  bufferWriteU8(yyval.action, SWFACTION_SETTARGETEXPRESSION);
			/* stmt */
		  bufferConcat(yyval.action, yyvsp[0].action);
			/* SetTarget('') */
		  bufferWriteU8(yyval.action, SWFACTION_SETTARGET);
		  bufferWriteS16(yyval.action, 1);
		  bufferWriteU8(yyval.action, 0); ;
    break;}
case 65:
#line 581 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE); ;
    break;}
case 66:
#line 585 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteU8(yyval.action, SWFACTION_GETTIMER); ;
    break;}
case 67:
#line 589 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_RANDOM); ;
    break;}
case 68:
#line 593 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_STRINGLENGTH); ;
    break;}
case 69:
#line 597 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_INT); ;
    break;}
case 70:
#line 601 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_ORD); ;
    break;}
case 71:
#line 605 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action;
		  bufferWriteU8(yyval.action, SWFACTION_CHR); ;
    break;}
case 72:
#line 609 "swf4compiler.y"
{ yyval.action = yyvsp[-3].action;
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_STRINGCONCAT); ;
    break;}
case 73:
#line 614 "swf4compiler.y"
{ yyval.action = yyvsp[-5].action;
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_SUBSTRING); ;
    break;}
case 74:
#line 620 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferConcat(yyval.action, yyvsp[-3].action);
		  bufferWriteGetProperty(yyval.action, yyvsp[-1].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  free(yyvsp[-1].str); ;
    break;}
case 75:
#line 629 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteBuffer(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteBuffer(yyval.action, yyvsp[-1].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_ADD);
		  bufferWriteU8(yyval.action, SWFACTION_SETVARIABLE); ;
    break;}
case 76:
#line 640 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteBuffer(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteBuffer(yyval.action, yyvsp[-1].action);
		  bufferConcat(yyval.action, yyvsp[-1].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_SUBTRACT);
		  bufferWriteU8(yyval.action, SWFACTION_SETVARIABLE); ;
    break;}
case 78:
#line 656 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action; ;
    break;}
case 79:
#line 659 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 80:
#line 664 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, "-", 2);
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 81:
#line 670 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 82:
#line 675 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  free(yyvsp[0].str); ;
    break;}
case 83:
#line 681 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 84:
#line 686 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  free(yyvsp[0].str);
		  free(yyvsp[-2].str); ;
    break;}
case 85:
#line 694 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_ADD);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  free(yyvsp[-2].str);
		  free(yyvsp[0].str); ;
    break;}
case 86:
#line 709 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteU8(yyval.action, SWFACTION_DUP);
		  bufferWriteU8(yyval.action, SWFACTION_DUP);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_ADD);
		  bufferWriteU8(yyval.action, SWFACTION_SETVARIABLE);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE); ;
    break;}
case 87:
#line 719 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_ADD);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  free(yyvsp[-2].str);
		  free(yyvsp[0].str); ;
    break;}
case 88:
#line 734 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteU8(yyval.action, SWFACTION_DUP);
		  bufferWriteU8(yyval.action, SWFACTION_DUP);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_SUBTRACT);
		  bufferWriteU8(yyval.action, SWFACTION_SETVARIABLE);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE); ;
    break;}
case 89:
#line 744 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteString(yyvsp[0].action, "-1", 3);
		  bufferWriteU8(yyvsp[0].action, SWFACTION_MULTIPLY); ;
    break;}
case 90:
#line 749 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteU8(yyvsp[0].action, SWFACTION_LOGICALNOT); ;
    break;}
case 91:
#line 753 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_DUP);
		  bufferWriteU8(yyval.action, SWFACTION_SETVARIABLE); ;
    break;}
case 92:
#line 759 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_MULTIPLY); ;
    break;}
case 93:
#line 764 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_DIVIDE); ;
    break;}
case 94:
#line 769 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_ADD); ;
    break;}
case 95:
#line 774 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_SUBTRACT); ;
    break;}
case 96:
#line 779 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_STRINGCONCAT); ;
    break;}
case 97:
#line 784 "swf4compiler.y"
{ yyval.action = yyvsp[-2].action;
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_LESSTHAN); ;
    break;}
case 98:
#line 789 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteU8(yyval.action, SWFACTION_LESSTHAN); ;
    break;}
case 99:
#line 794 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferConcat(yyval.action, yyvsp[-2].action);
		  bufferWriteU8(yyval.action, SWFACTION_LESSTHAN);
		  bufferWriteU8(yyval.action, SWFACTION_LOGICALNOT); ;
    break;}
case 100:
#line 800 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_LESSTHAN);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_LOGICALNOT); ;
    break;}
case 101:
#line 805 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_STRINGEQ);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_LOGICALNOT); ;
    break;}
case 102:
#line 810 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_STRINGEQ); ;
    break;}
case 103:
#line 814 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_STRINGCOMPARE); ;
    break;}
case 104:
#line 818 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_EQUAL); ;
    break;}
case 105:
#line 822 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_EQUAL);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_LOGICALNOT); ;
    break;}
case 106:
#line 827 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_LOGICALAND); ;
    break;}
case 107:
#line 831 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_LOGICALOR); ;
    break;}
case 108:
#line 835 "swf4compiler.y"
{ bufferWriteU8(yyvsp[-4].action, SWFACTION_BRANCHIFTRUE);
		  bufferWriteS16(yyvsp[-4].action, 2);
		  bufferWriteS16(yyvsp[-4].action, bufferLength(yyvsp[0].action)+5);
		  bufferConcat(yyvsp[-4].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-4].action, SWFACTION_BRANCHALWAYS);
		  bufferWriteS16(yyvsp[-4].action, 2);
		  bufferWriteS16(yyvsp[-4].action, bufferLength(yyvsp[-2].action));
		  bufferConcat(yyvsp[-4].action, yyvsp[-2].action); ;
    break;}
case 110:
#line 849 "swf4compiler.y"
{ yyval.str = yyvsp[-2].str;
		  yyval.str = stringConcat(yyval.str, _strdup(":"));
		  yyval.str = stringConcat(yyval.str, yyvsp[0].str); ;
    break;}
case 111:
#line 856 "swf4compiler.y"
{ yyval.str = _strdup(""); ;
    break;}
case 112:
#line 859 "swf4compiler.y"
{ yyval.str = _strdup(""); ;
    break;}
case 113:
#line 862 "swf4compiler.y"
{ yyval.str = _strdup("/"); ;
    break;}
case 114:
#line 865 "swf4compiler.y"
{ yyval.str = _strdup(".."); ;
    break;}
case 115:
#line 868 "swf4compiler.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 116:
#line 871 "swf4compiler.y"
{ yyval.str = yyvsp[0].str; ;
    break;}
case 117:
#line 876 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 118:
#line 881 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[0].str, strlen(yyvsp[0].str)+1);
		  free(yyvsp[0].str); ;
    break;}
case 119:
#line 885 "swf4compiler.y"
{ yyval.action = yyvsp[-1].action; ;
    break;}
case 122:
#line 894 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteBuffer(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_ADD);
		  bufferWriteU8(yyval.action, SWFACTION_SETVARIABLE); ;
    break;}
case 123:
#line 902 "swf4compiler.y"
{ yyval.action = yyvsp[0].action;
		  bufferWriteBuffer(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_GETVARIABLE);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_SUBTRACT);
		  bufferWriteU8(yyval.action, SWFACTION_SETVARIABLE); ;
    break;}
case 124:
#line 910 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_ADD);
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  free(yyvsp[-2].str);
		  free(yyvsp[0].str); ;
    break;}
case 125:
#line 923 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  bufferWriteString(yyval.action, "1", 2);
		  bufferWriteU8(yyval.action, SWFACTION_SUBTRACT);
		  bufferWriteString(yyval.action, yyvsp[-2].str, strlen(yyvsp[-2].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[0].str);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  free(yyvsp[-2].str);
		  free(yyvsp[0].str); ;
    break;}
case 126:
#line 936 "swf4compiler.y"
{ bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_SETVARIABLE); ;
    break;}
case 127:
#line 940 "swf4compiler.y"
{ bufferWriteBuffer(yyvsp[-2].action, yyvsp[-2].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_GETVARIABLE);
		  bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_MULTIPLY);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_SETVARIABLE); ;
    break;}
case 128:
#line 947 "swf4compiler.y"
{ bufferWriteBuffer(yyvsp[-2].action, yyvsp[-2].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_GETVARIABLE);
		  bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_DIVIDE);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_SETVARIABLE); ;
    break;}
case 129:
#line 954 "swf4compiler.y"
{ bufferWriteBuffer(yyvsp[-2].action, yyvsp[-2].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_GETVARIABLE);
		  bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_ADD);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_SETVARIABLE); ;
    break;}
case 130:
#line 961 "swf4compiler.y"
{ bufferWriteBuffer(yyvsp[-2].action, yyvsp[-2].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_GETVARIABLE);
		  bufferConcat(yyvsp[-2].action, yyvsp[0].action);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_SUBTRACT);
		  bufferWriteU8(yyvsp[-2].action, SWFACTION_SETVARIABLE); ;
    break;}
case 131:
#line 968 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[-2].str);
		  bufferConcat(yyval.action,yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  free(yyvsp[-4].str);
		  free(yyvsp[-2].str); ;
    break;}
case 132:
#line 977 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_MULTIPLY);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  free(yyvsp[-4].str);
		  free(yyvsp[-2].str); ;
    break;}
case 133:
#line 990 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_DIVIDE);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  free(yyvsp[-4].str);
		  free(yyvsp[-2].str); ;
    break;}
case 134:
#line 1003 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_ADD);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  free(yyvsp[-4].str);
		  free(yyvsp[-2].str); ;
    break;}
case 135:
#line 1016 "swf4compiler.y"
{ yyval.action = newBuffer();
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteSetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteString(yyval.action, yyvsp[-4].str, strlen(yyvsp[-4].str)+1);
		  bufferWriteGetProperty(yyval.action, yyvsp[-2].str);
		  bufferWriteU8(yyval.action, SWFACTION_GETPROPERTY);
		  bufferConcat(yyval.action, yyvsp[0].action);
		  bufferWriteU8(yyval.action, SWFACTION_SUBTRACT);
		  bufferWriteU8(yyval.action, SWFACTION_SETPROPERTY);
		  free(yyvsp[-4].str);
		  free(yyvsp[-2].str); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1033 "swf4compiler.y"

