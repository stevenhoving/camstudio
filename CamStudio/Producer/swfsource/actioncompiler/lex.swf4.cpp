#include <stdlib.h>
#include "common.h"

#define input yyinput

#define yy_create_buffer swf4_create_buffer
#define yy_delete_buffer swf4_delete_buffer
#define yy_scan_buffer swf4_scan_buffer
#define yy_scan_string swf4_scan_string
#define yy_scan_sbytes swf4_scan_sbytes
#define yy_flex_debug swf4_flex_debug
#define yy_init_buffer swf4_init_buffer
#define yy_flush_buffer swf4_flush_buffer
#define yy_load_buffer_state swf4_load_buffer_state
#define yy_switch_to_buffer swf4_switch_to_buffer
#define yyin swf4in
#define yyleng swf4leng
#define yylex swf4lex
#define yyout swf4out
#define yyrestart swf4restart
#define yytext swf4text
#define yywrap swf4wrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in sbytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */

int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_sbytes YY_PROTO(( yyconst char *sbytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 95
#define YY_END_OF_BUFFER 96
static yyconst short int yy_accept[318] =
    {   0,
        0,    0,   96,   94,   56,   93,   82,   94,   79,   94,
       83,   84,   80,   77,   89,   78,   90,   81,    1,   92,
       75,   59,   76,   60,   91,   85,   86,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   87,   94,   88,   64,    0,   52,
       50,    0,   65,    0,   53,   51,    0,   67,   57,   69,
       58,   70,   74,    0,   54,   48,   55,   68,   48,    2,
        1,   61,   63,   62,    0,   47,   47,   47,   47,   47,
       11,   47,   47,   47,   47,   47,   47,   47,    9,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       66,   72,   48,   48,    2,   73,   71,   49,   49,   47,
       47,   24,   47,   47,   47,   47,    8,   47,   33,   47,
       16,   47,   47,   47,   47,   23,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   49,   49,   47,   47,   47,   47,   47,
        7,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       37,   32,   47,   47,   47,   47,   47,   38,   47,   47,
       46,   14,   47,   47,    3,   47,   47,    5,   47,   47,
       47,   47,    4,   47,   47,   47,   47,   47,   47,   47,

       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   20,   47,   10,   47,   17,   47,   47,
       47,   47,   26,   47,   47,   15,   47,   47,   47,   34,
       47,   13,   47,   47,   47,   47,   47,   30,   47,   47,
       47,   47,   47,   47,   47,   47,   27,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
       12,   47,    6,   47,   47,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   22,   47,   47,   47,   25,
       47,   47,   47,   47,   41,   28,   47,   35,   36,   47,
       44,   21,   47,   47,   47,   47,   47,   47,   47,   47,

       19,   40,   45,   47,   47,   43,   31,   42,   47,   47,
       47,   47,   47,   18,   29,   39,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   16,
       16,   16,   16,   16,   16,   16,   16,   18,   19,   20,
       21,   22,   23,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   27,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   27,
       24,   25,   26,    1,   27,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   27,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   27,   52,   53,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    3,    4,    5,    5,    1,    1,    1,
        2,    1,    1,    1,    1,    1,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1,    1,    1
    } ;

static yyconst short int yy_base[325] =
    {   0,
        0,    0,  624,  625,  625,  625,  602,   52,  616,   53,
      625,  625,  600,   47,  625,   46,   47,   55,   57,  625,
      625,  599,  598,  597,  625,  625,  625,  602,   48,   60,
       49,   51,   65,   66,   64,   67,   70,   68,   72,   90,
       85,  104,   99,   88,  625,  563,  625,  594,  121,  125,
      625,  611,  625,  118,  126,  625,  610,  625,  625,  625,
      625,  625,  597,  139,  625,  120,  625,  625,  596,  121,
      141,  588,  588,  625,  594,  592,  127,  126,   71,  129,
      591,  105,  137,  141,  146,  147,  148,  150,  590,  151,
      152,  153,  155,  156,  157,  158,  159,  161,  162,  168,

      163,  170,  174,  172,  176,  169,   57,  185,  180,  184,
      625,  625,  589,  588,  198,  625,  625,  202,  587,  191,
      206,  586,  207,  208,  209,  210,  585,  211,  212,  215,
      584,  213,  214,  216,  219,  583,  218,  220,  223,  221,
      224,  227,  228,  225,  233,  242,  234,  243,  248,  246,
      245,  249,  253,  582,  581,  255,  266,  259,  268,  269,
      580,  270,  271,  273,  274,  278,  275,  280,  279,  282,
      579,  578,  283,  285,  286,  292,  293,  298,  294,  295,
      577,  576,  299,  300,  575,  310,  312,  574,  308,  309,
      316,  315,  573,  320,  318,  323,  331,  321,  332,  333,

      334,  335,  338,  336,  339,  345,  342,  351,  348,  349,
      353,  355,  357,  572,  358,  571,  360,  570,  361,  366,
      369,  370,  376,  372,  381,  569,  380,  383,  385,  564,
      386,  563,  387,  389,  390,  391,  392,  554,  396,  400,
      403,  405,  401,  406,  407,  409,  537,  411,  410,  414,
      415,  416,  417,  422,  427,  430,  423,  431,  432,  433,
      536,  446,  535,  447,  439,  448,  449,  450,  452,  453,
      454,  457,  458,  459,  461,  533,  460,  468,  462,  528,
      473,  470,  478,  481,  527,  526,  482,  525,  524,  483,
      523,  522,  484,  486,  489,  492,  491,  493,  495,  497,

      518,  513,  511,  498,  500,  508,  506,  505,  499,  501,
      503,  504,  502,  165,   79,   69,  625,  553,  559,  564,
      567,  570,  574,  577
    } ;

static yyconst short int yy_def[325] =
    {   0,
      317,    1,  317,  317,  317,  317,  317,  318,  317,  319,
      317,  317,  317,  317,  317,  317,  317,  320,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  317,  317,  317,  317,  318,  318,
      317,  318,  317,  319,  319,  317,  319,  317,  317,  317,
      317,  317,  317,  320,  317,  317,  317,  317,  322,  317,
      317,  317,  317,  317,  323,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      317,  317,  317,  322,  317,  317,  317,  317,  324,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  317,  324,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  321,  321,    0,  317,  317,  317,
      317,  317,  317,  317
    } ;

static yyconst short int yy_nxt[680] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   19,   20,   21,   22,
       23,   24,   25,   26,    4,   27,   28,   28,   29,   30,
       31,   32,   33,   34,   28,   35,   28,   36,   28,   37,
       38,   39,   28,   40,   41,   42,   28,   43,   44,   28,
       28,   45,   46,   47,   50,   55,   51,   59,   61,   56,
       63,   64,   75,   75,   65,   75,   62,   60,   66,   67,
       70,   75,   71,   71,   75,   68,   52,   57,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   78,   83,   81,
      149,   77,   84,   75,   79,   82,   89,   87,   91,   75,

       80,   93,   75,   90,   75,   85,   88,   92,   86,   96,
       94,   95,   97,   75,  122,   98,  101,   99,   75,   75,
       55,  100,  110,   50,   56,   51,  109,   50,   55,   51,
      102,  103,   56,  113,   64,  104,  115,  115,  105,  106,
       75,   75,   57,   75,  107,   52,  124,  108,  317,   52,
       57,   75,   66,  317,   70,   75,   71,   71,  120,  317,
       75,   75,   75,  121,   75,   75,   75,   75,  123,   75,
       75,   75,   75,   75,  128,   75,   75,   75,  126,   75,
      133,  125,   75,   75,   75,  137,   75,  136,   75,  127,
       75,  132,  139,  129,   75,  130,  131,  143,   75,   75,

      135,  140,  145,  138,  134,   75,  141,  148,  142,  146,
      144,  147,  150,  115,  115,  154,   75,  152,  156,  153,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  151,   75,   75,   75,   75,  158,   75,   75,   75,
      161,   75,   75,  157,  168,  160,  167,   75,   75,  163,
      170,  174,  159,  164,  162,  166,   75,   75,  165,   75,
       75,  169,   75,   75,  175,  172,  178,   75,  171,   75,
      173,  177,  176,   75,  182,  184,  185,  179,  181,  180,
       75,  183,   75,   75,   75,   75,  190,   75,   75,   75,
      187,  188,   75,   75,   75,  186,   75,   75,  189,   75,

       75,  193,  194,  191,  192,  197,   75,   75,   75,   75,
      198,  202,   75,   75,   75,  204,  195,  196,  200,  207,
      199,  203,   75,   75,   75,  205,   75,  201,  209,   75,
       75,  214,   75,  206,   75,   75,  213,   75,  208,  211,
      212,  215,  210,  216,  220,   75,   75,   75,   75,   75,
       75,  217,   75,   75,  218,  219,   75,  221,  222,   75,
      223,  228,   75,   75,  225,   75,  226,   75,  230,   75,
      224,   75,   75,  227,   75,   75,  233,  232,  229,  231,
       75,  235,  239,   75,   75,  234,   75,  242,  240,  237,
       75,  236,  247,  244,   75,   75,  238,   75,  241,   75,

       75,   75,  248,   75,   75,   75,   75,  243,  249,  245,
       75,  246,  252,  253,   75,   75,  254,   75,  257,   75,
       75,   75,  255,   75,   75,   75,  251,  250,   75,   75,
       75,   75,  263,  256,  265,  261,   75,   75,  258,  259,
      266,   75,  260,  262,   75,   75,   75,   75,  268,  269,
      270,  264,  267,   75,  271,  272,  276,  275,  274,  273,
       75,   75,   75,   75,   75,  278,   75,   75,   75,  282,
      277,   75,   75,   75,   75,   75,   75,  280,  281,  279,
      287,  285,   75,  286,   75,  288,  284,   75,  289,  295,
      293,  283,   75,  290,  292,   75,   75,   75,   75,  294,

       75,  297,  296,   75,  291,   75,   75,   75,  299,   75,
      300,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,  306,   75,  298,  301,   75,  304,   75,  302,  305,
      312,  303,   75,  310,  309,  311,   75,   75,   75,   75,
       75,   75,   75,  307,  314,  308,  313,   75,  315,   75,
       75,   75,  316,   49,   49,   49,   49,   49,   49,   54,
       54,   54,   54,   54,   54,   69,   69,   69,   75,   69,
       76,   76,   76,  114,  114,  114,  119,   75,   75,  119,
      155,  155,  155,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,

       75,   75,   64,   64,   75,   75,   75,  118,  117,  116,
       64,   64,  317,  317,  112,  111,   75,   74,   73,   72,
       58,   53,   48,  317,    3,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317
    } ;

static yyconst short int yy_chk[680] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    8,   10,    8,   14,   16,   10,
       17,   17,   29,   31,   18,   32,   16,   14,   18,   18,
       19,  107,   19,   19,   30,   18,    8,   10,   35,   33,
       34,   36,   38,  316,   37,   79,   39,   30,   32,   31,
      107,   29,   33,  315,   30,   31,   35,   34,   36,   41,

       30,   37,   44,   35,   40,   33,   34,   36,   33,   39,
       37,   38,   39,   43,   79,   39,   41,   40,   42,   82,
       54,   40,   44,   49,   54,   49,   43,   50,   55,   50,
       41,   41,   55,   66,   66,   42,   70,   70,   42,   42,
       78,   77,   54,   80,   42,   49,   82,   42,   64,   50,
       55,   83,   64,   64,   71,   84,   71,   71,   77,   64,
       85,   86,   87,   78,   88,   90,   91,   92,   80,   93,
       94,   95,   96,   97,   86,   98,   99,  101,   84,  314,
       92,   83,  100,  106,  102,   96,  104,   95,  103,   85,
      105,   91,   98,   87,  109,   88,   90,  102,  110,  108,

       94,   99,  103,   97,   93,  120,  100,  106,  101,  104,
      102,  105,  108,  115,  115,  118,  118,  109,  120,  110,
      121,  123,  124,  125,  126,  128,  129,  132,  133,  130,
      134,  108,  137,  135,  138,  140,  123,  139,  141,  144,
      125,  142,  143,  121,  133,  124,  132,  145,  147,  128,
      135,  140,  123,  129,  126,  130,  146,  148,  129,  151,
      150,  134,  149,  152,  141,  138,  144,  153,  137,  156,
      139,  143,  142,  158,  148,  150,  151,  145,  147,  146,
      157,  149,  159,  160,  162,  163,  158,  164,  165,  167,
      153,  156,  166,  169,  168,  152,  170,  173,  157,  174,

      175,  162,  163,  159,  160,  166,  176,  177,  179,  180,
      166,  169,  178,  183,  184,  173,  164,  165,  168,  176,
      167,  170,  189,  190,  186,  174,  187,  168,  178,  192,
      191,  184,  195,  175,  194,  198,  183,  196,  177,  179,
      180,  186,  178,  187,  192,  197,  199,  200,  201,  202,
      204,  189,  203,  205,  190,  191,  207,  194,  195,  206,
      196,  201,  209,  210,  198,  208,  199,  211,  203,  212,
      197,  213,  215,  200,  217,  219,  206,  205,  202,  204,
      220,  208,  212,  221,  222,  207,  224,  217,  213,  210,
      223,  209,  223,  220,  227,  225,  211,  228,  215,  229,

      231,  233,  224,  234,  235,  236,  237,  219,  225,  221,
      239,  222,  229,  231,  240,  243,  233,  241,  236,  242,
      244,  245,  234,  246,  249,  248,  228,  227,  250,  251,
      252,  253,  243,  235,  245,  241,  254,  257,  237,  239,
      246,  255,  240,  242,  256,  258,  259,  260,  249,  250,
      251,  244,  248,  265,  252,  253,  257,  256,  255,  254,
      262,  264,  266,  267,  268,  259,  269,  270,  271,  265,
      258,  272,  273,  274,  277,  275,  279,  262,  264,  260,
      270,  268,  278,  269,  282,  271,  267,  281,  272,  279,
      277,  266,  283,  273,  275,  284,  287,  290,  293,  278,

      294,  282,  281,  295,  274,  297,  296,  298,  284,  299,
      287,  300,  304,  309,  305,  310,  313,  311,  312,  308,
      307,  297,  306,  283,  290,  303,  295,  302,  293,  296,
      309,  294,  301,  304,  300,  305,  292,  291,  289,  288,
      286,  285,  280,  298,  311,  299,  310,  276,  312,  263,
      261,  247,  313,  318,  318,  318,  318,  318,  318,  319,
      319,  319,  319,  319,  319,  320,  320,  320,  238,  320,
      321,  321,  321,  322,  322,  322,  323,  232,  230,  323,
      324,  324,  324,  226,  218,  216,  214,  193,  188,  185,
      182,  181,  172,  171,  161,  155,  154,  136,  131,  127,

      122,  119,  114,  113,   89,   81,   76,   75,   73,   72,
       69,   63,   57,   52,   48,   46,   28,   24,   23,   22,
       13,    9,    7,    3,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "swf4compiler.flex"
#define INITIAL 0
#line 2 "swf4compiler.flex"

#include <math.h>
#include <string.h>

#include "compile.h"
#include "action.h"
#include "swf4compiler.tab.h" /* defines token types */

int swf4debug;

static char *lexBuffer = NULL;
static int lexBufferLen = 0;

static int  sLineNumber = 0;
static char szLine[1024];
static char msgbufs[2][1024] = { {0}, {0} }, *msgline = {0};
static int  column = 0;

static void comment();
static void comment1();
static void count();
static void warning(char *msg);

#define YY_INPUT(buf,result,max_size) result=lexBufferInput(buf, max_size)

/* thanks to the prolific and brilliant Raff: */
static int lexBufferInput(char *buf, int max_size)
{
  int l = lexBufferLen > max_size ? max_size : lexBufferLen;

  if (lexBufferLen <= 0)
    return YY_NULL;

  memcpy(buf, lexBuffer, l);
  lexBuffer += l;
  lexBufferLen -= l;
  return l;
}

        /* very inefficient method of unescaping strings */
static void unescape(char *buf)
{
  char *p, *p1;

  for (p1=buf; (p=strchr(p1, '\\')) != 0; p1 = p+1) {
    switch(p[1])
    {
    case 'b' : p[1] = '\b'; break;
    case 'f' : p[1] = '\f'; break;
    case 'n' : p[1] = '\n'; break;
    case 'r' : p[1] = '\r'; break;
    case 't' : p[1] = '\t'; break;
    case 'x' :
    case 'u' : warning("unsupported escape sequence");
    }
    strcpy(p, p+1);
  }
}

void swf4ParseInit(char *script, int debug)
{
  checksbyteOrder();
  yyrestart(NULL);

  swf4debug = debug;

  lexBuffer = script;
  lexBufferLen = strlen(script);
  sLineNumber = 0;
  column = 0;
  msgline = msgbufs[0];
}

#line 710 "lex.swf4.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 81 "swf4compiler.flex"

#line 864 "lex.swf4.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 318 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 625 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 83 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup(yytext);
					return NUMBER; 		}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 85 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup(yytext);
					return NUMBER; 		}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 87 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup("1");
					return NUMBER;		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 89 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup("0");
					return NUMBER;		}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 91 "swf4compiler.flex"
{ count();	return BREAK;		}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 92 "swf4compiler.flex"
{ count();	return CONTINUE;	}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 93 "swf4compiler.flex"
{ count();	return ELSE;		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 94 "swf4compiler.flex"
{ count();	return FOR;		}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 95 "swf4compiler.flex"
{ count();	return IF;		}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 96 "swf4compiler.flex"
{ count();	return WHILE;		}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 97 "swf4compiler.flex"
{ count();	return DO;		}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 98 "swf4compiler.flex"
{ count(); 	return EVAL;		}
	YY_BREAK
/* functions */
case 13:
YY_RULE_SETUP
#line 101 "swf4compiler.flex"
{ count();	return RANDOM;	}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 102 "swf4compiler.flex"
{ count();	return TIME;	}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 103 "swf4compiler.flex"
{ count();	return LENGTH;	}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 104 "swf4compiler.flex"
{ count();	return INT;	}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 105 "swf4compiler.flex"
{ count();	return CONCAT;	}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 106 "swf4compiler.flex"
{ count();	return DUPLICATECLIP;	}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 107 "swf4compiler.flex"
{ count();	return REMOVECLIP;	}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 108 "swf4compiler.flex"
{ count();	return TRACE;	}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 109 "swf4compiler.flex"
{ count();	return STARTDRAG;	}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 110 "swf4compiler.flex"
{ count();	return STOPDRAG;	}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 111 "swf4compiler.flex"
{ count();	return ORD;	}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 112 "swf4compiler.flex"
{ count();	return CHR;	}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 113 "swf4compiler.flex"
{ count();	return CALLFRAME;	}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 114 "swf4compiler.flex"
{ count();	return GETURL;	}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 115 "swf4compiler.flex"
{ count();	return GETURL1; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 116 "swf4compiler.flex"
{ count();	return LOADMOVIE;	}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 117 "swf4compiler.flex"
{ count();	return LOADVARIABLES;	}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 118 "swf4compiler.flex"
{ count();	return SUBSTR;	}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 120 "swf4compiler.flex"
{ count();	return GETPROPERTY;	}
	YY_BREAK
/* getURL2 methods */
case 32:
YY_RULE_SETUP
#line 123 "swf4compiler.flex"
{ count();	swf4lval.getURLMethod = GETURL_METHOD_POST;
				return GETURL_METHOD;	}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 125 "swf4compiler.flex"
{ count();	swf4lval.getURLMethod = GETURL_METHOD_GET;
				return GETURL_METHOD;	}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 127 "swf4compiler.flex"
{ count();	swf4lval.getURLMethod = GETURL_METHOD_NOSEND;
				return GETURL_METHOD;	}
	YY_BREAK
/* v3 functions */
case 35:
YY_RULE_SETUP
#line 132 "swf4compiler.flex"
{ count();	return NEXTFRAME;	}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 133 "swf4compiler.flex"
{ count();	return PREVFRAME;	}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 134 "swf4compiler.flex"
{ count();	return PLAY;		}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 135 "swf4compiler.flex"
{ count();	return STOP;		}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 136 "swf4compiler.flex"
{ count();	return TOGGLEQUALITY;	}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 137 "swf4compiler.flex"
{ count();	return STOPSOUNDS;	}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 138 "swf4compiler.flex"
{ count();	return GOTOFRAME;	}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 139 "swf4compiler.flex"
{ count();	return GOTOANDPLAY;	}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 140 "swf4compiler.flex"
{ count();	return FRAMELOADED;	}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 141 "swf4compiler.flex"
{ count();	return SETTARGET;	}
	YY_BREAK
/* high level functions */
case 45:
YY_RULE_SETUP
#line 144 "swf4compiler.flex"
{ count();	return TELLTARGET;	}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 147 "swf4compiler.flex"
{ count();      return THIS;	}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 149 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup(yytext);
					return IDENTIFIER;	}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 152 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup(yytext);
					return PATH;    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 155 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup(yytext);
					return PATH;    }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 158 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup(yytext+1);
					swf4lval.str[strlen(swf4lval.str)-1]=0;
                                        unescape(swf4lval.str);
					return STRING;		}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 163 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup(yytext+1);
					swf4lval.str[strlen(swf4lval.str)-1]=0;
                                        unescape(swf4lval.str);
					return STRING; 		}
	YY_BREAK
case 52:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 168 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup("");
					warning("Unterminated string!");
					return STRING;		}
	YY_BREAK
case 53:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "swf4compiler.flex"
{ count();	swf4lval.str = _strdup("");
					warning("Unterminated string!");
					return STRING;		}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 176 "swf4compiler.flex"
{ count();	comment();		}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 177 "swf4compiler.flex"
{ count();	comment1();		}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 178 "swf4compiler.flex"
{ count(); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 180 "swf4compiler.flex"
{ count();	return INC; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 181 "swf4compiler.flex"
{ count();	return DEC; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 182 "swf4compiler.flex"
{ count();	return '<'; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 183 "swf4compiler.flex"
{ count();	return '>'; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 184 "swf4compiler.flex"
{ count();	return LE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 185 "swf4compiler.flex"
{ count();	return GE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 186 "swf4compiler.flex"
{ count();	return EQ; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 187 "swf4compiler.flex"
{ count();	return NE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 188 "swf4compiler.flex"
{ count();	return LAN; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 189 "swf4compiler.flex"
{ count();	return LOR; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 190 "swf4compiler.flex"
{ count();	return MEQ; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 191 "swf4compiler.flex"
{ count();	return DEQ; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 192 "swf4compiler.flex"
{ count();	return IEQ; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 193 "swf4compiler.flex"
{ count();	return SEQ; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 194 "swf4compiler.flex"
{ count();	return STREQ; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 195 "swf4compiler.flex"
{ count();	return STRNE; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 196 "swf4compiler.flex"
{ count();	return STRCMP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 197 "swf4compiler.flex"
{ count();	return PARENT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 199 "swf4compiler.flex"
{ count();	return ';'; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 200 "swf4compiler.flex"
{ count();	return '='; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 201 "swf4compiler.flex"
{ count();	return '+'; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 202 "swf4compiler.flex"
{ count();	return '-'; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 203 "swf4compiler.flex"
{ count();	return '&'; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 204 "swf4compiler.flex"
{ count();	return '*'; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 205 "swf4compiler.flex"
{ count();	return '/'; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 206 "swf4compiler.flex"
{ count();	return '!'; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 207 "swf4compiler.flex"
{ count();	return '('; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 208 "swf4compiler.flex"
{ count();	return ')'; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 209 "swf4compiler.flex"
{ count();	return '['; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 210 "swf4compiler.flex"
{ count();	return ']'; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 211 "swf4compiler.flex"
{ count();	return '{'; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 212 "swf4compiler.flex"
{ count();	return '}'; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 213 "swf4compiler.flex"
{ count();	return ','; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 214 "swf4compiler.flex"
{ count();	return '.'; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 215 "swf4compiler.flex"
{ count();	return '?'; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 216 "swf4compiler.flex"
{ count();	return ':'; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 218 "swf4compiler.flex"
{ count();	column = 0;
					strcpy(szLine, yytext + 1);
					++sLineNumber;	yyless(1);	}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 222 "swf4compiler.flex"
printf( "Unrecognized character: %s\n", yytext );
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 224 "swf4compiler.flex"
ECHO;
	YY_BREAK
#line 1454 "lex.swf4.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}

/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 318 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 318 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 317);

	return yy_is_jam ? 0 : yy_current_state;
	}

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */

#ifdef __cplusplus
static int input()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	return c;
	}

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}

#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}

#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}

#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}

#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}

#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_sbytes( yy_str, len );
	}
#endif

#ifndef YY_NO_SCAN_sbyteS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_sbytes( yyconst char *sbytes, int len )
#else
YY_BUFFER_STATE yy_scan_sbytes( sbytes, len )
yyconst char *sbytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_sbytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = sbytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_sbytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif

#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif

#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 224 "swf4compiler.flex"

int swf4wrap()
{
  return 1;
}

static void countline()
{
  if (sLineNumber != 0)
    msgline[column] = 0;

  ++sLineNumber;
  column = 0;
  msgline = msgbufs[sLineNumber & 1];
}

static int LineNumber(void)
{
   return (sLineNumber + 1);
}

static int ColumnNumber(void)
{
   return column;
}

static char *LineText(void)
{
  msgline[column] = 0;
  return msgline;
}

static void comment(void)
{
   // Handle block comments

   char c, c1;

loop:
   // We have the start of a comment so look skip everything up to the
   // end of the comment character
   while ((c = input()) != '*' && c != 0)
   {
      if (column < 1023)
         msgline[column] = c;

      ++column;

      // keep the line number in synch
      if (c == '\n')
      {
         // start the output (matches the algorithim in the lexx above)
	 countline();
      }

      if (swf4debug) putchar(c);
   }

   // is this the end of comment character
   if ((c1 = input()) != '/' && c != 0)
   {
      // false start as this was no end of comment
      unput(c1);
      goto loop;
   }

   // write out the start of the end of comment
   if (c != 0)
      if (swf4debug) putchar(c);

   // write out the end of the end of comment
   if (c1 != 0)
      if (swf4debug) putchar(c1);
}

static void comment1(void)
{
   // Handle comment of type 1 (ie '//')

   char c;

   // this is a line comment
   while ((c = input()) != '\n' && c != 0)
   {
      if (swf4debug) putchar(c);

      if (column < 1023)
         msgline[column] = c;

      ++column;
   };

   // keep the line number in synch
   if (c == '\n')
   {
      if (swf4debug) putchar(c);

      countline();
   }
}

static void count(void)
{
   int n;

   // Count the characters to maintain the current column position
   if (yytext[0] == '\n')
   {
      if (swf4debug) printf("\n");
   }
   else
   {
      if (swf4debug) printf("%s", yytext);

      for(n=0; n<yyleng; ++n, ++column)
      {
	if (column < 1023)
	  msgline[column] = yytext[n];
      }

      //-- keep writing the stuff to standard output
      //column += yyleng;
   }
}

static void printprog()
{
  if (sLineNumber)
    SWF_warn("\n%s", msgbufs[(sLineNumber-1)&1]);

  if (column < 1023)
    msgline[column] = 0;

  SWF_warn("\n%s", msgline);
}

static void warning(char *msg)
{
   // print a warning message
   printprog();
   SWF_warn("\n%*s", ColumnNumber(), "^");
   SWF_warn("\nLine %4.4d:  Reason: '%s' \n", LineNumber(), msg);
}

void swf4error(char *msg)
{
  // report a error
  if (strlen(yytext))
  {
    SWF_error(error_fp,"\n%s\n%*s\nLine %i:  Reason: '%s'\n",
	      LineText(), ColumnNumber(), "^", LineNumber(), msg);
  }
  else
  {
    SWF_error(error_fp,"\nLine %d: Reason: 'Unexpected EOF found while looking for input.'\n", LineNumber());
  }
}
